{
  "api/Gestalt.ASPNet.AspNetApplication.html": {
    "href": "api/Gestalt.ASPNet.AspNetApplication.html",
    "title": "Class AspNetApplication | Gestalt API Reference",
    "keywords": "Class AspNetApplication Namespace Gestalt.ASPNet Assembly Gestalt.ASPNet.dll ASP.NET Application. public class AspNetApplication : ApplicationBaseClass, IApplication Inheritance object ApplicationBaseClass AspNetApplication Implements IApplication Inherited Members ApplicationBaseClass.Name ApplicationBaseClass.Configuration ApplicationBaseClass.Environment ApplicationBaseClass.Frameworks ApplicationBaseClass.InternalLogger ApplicationBaseClass.Modules ApplicationBaseClass.ConfigureConfigurationSettings(IConfigurationBuilder, string[]) ApplicationBaseClass.ConfigureFrameworks(IServiceCollection) ApplicationBaseClass.ConfigureHostSettings(IHostBuilder) ApplicationBaseClass.ConfigureLoggingSettings(ILoggingBuilder) ApplicationBaseClass.ConfigureServices(IServiceCollection) ApplicationBaseClass.OnStarted() ApplicationBaseClass.OnStopped() ApplicationBaseClass.OnStopping() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods GenericExtensions.When<TObject>(TObject?, bool, Func<TObject?, TObject?>?) Constructors AspNetApplication(IConfiguration?, IHostEnvironment?, params Assembly?[]?) Initializes a new instance of the AspNetApplication class. public AspNetApplication(IConfiguration? configuration, IHostEnvironment? env, params Assembly?[]? assemblies) Parameters configuration IConfiguration The configuration. env IHostEnvironment The hosting environment. assemblies Assembly[] The assemblies. Methods ConfigureApplication(WebApplication?) Configures the application, setting up the modules and endpoints. public WebApplication? ConfigureApplication(WebApplication? application) Parameters application WebApplication The application. Returns WebApplication The web application. ConfigureMetrics(IMetricsBuilder?) Configures the metrics settings. public void ConfigureMetrics(IMetricsBuilder? metrics) Parameters metrics IMetricsBuilder The metrics builder. ConfigureWebHostSettings(IWebHostBuilder?) Configures the host settings. public void ConfigureWebHostSettings(IWebHostBuilder? webHost) Parameters webHost IWebHostBuilder The web host builder See Also ApplicationBaseClass"
  },
  "api/Gestalt.ASPNet.BaseClasses.AspNetModuleBaseClass-1.html": {
    "href": "api/Gestalt.ASPNet.BaseClasses.AspNetModuleBaseClass-1.html",
    "title": "Class AspNetModuleBaseClass<TModule> | Gestalt API Reference",
    "keywords": "Class AspNetModuleBaseClass<TModule> Namespace Gestalt.ASPNet.BaseClasses Assembly Gestalt.ASPNet.dll Base class for ASP.NET modules. public abstract class AspNetModuleBaseClass<TModule> : ApplicationModuleBaseClass<TModule>, IEquatable<TModule>, IAspNetModule, IApplicationModule where TModule : ApplicationModuleBaseClass<TModule>, new() Type Parameters TModule The type of the module. Inheritance object ApplicationModuleBaseClass<TModule> AspNetModuleBaseClass<TModule> Implements IEquatable<TModule> IAspNetModule IApplicationModule Derived ControllerModuleBaseClass<TModule> MvcModuleBaseClass<TModule> RazorPagesModuleBaseClass<TModule> SignalRModuleBaseClass<TModule> Inherited Members ApplicationModuleBaseClass<TModule>.Category ApplicationModuleBaseClass<TModule>.ContentPath ApplicationModuleBaseClass<TModule>.ID ApplicationModuleBaseClass<TModule>.LastModified ApplicationModuleBaseClass<TModule>.Name ApplicationModuleBaseClass<TModule>.Order ApplicationModuleBaseClass<TModule>.Tags ApplicationModuleBaseClass<TModule>.Version ApplicationModuleBaseClass<TModule>.ConfigureConfigurationSettings(IConfigurationBuilder, IHostEnvironment, string[]) ApplicationModuleBaseClass<TModule>.ConfigureHostSettings(IHostBuilder, IConfiguration, IHostEnvironment) ApplicationModuleBaseClass<TModule>.ConfigureLoggingSettings(ILoggingBuilder, IConfiguration, IHostEnvironment) ApplicationModuleBaseClass<TModule>.ConfigureMetrics(IMetricsBuilder, IConfiguration, IHostEnvironment) ApplicationModuleBaseClass<TModule>.ConfigureServices(IServiceCollection, IConfiguration, IHostEnvironment) ApplicationModuleBaseClass<TModule>.Equals(object) ApplicationModuleBaseClass<TModule>.Equals(TModule) ApplicationModuleBaseClass<TModule>.GetHashCode() ApplicationModuleBaseClass<TModule>.OnStarted() ApplicationModuleBaseClass<TModule>.OnStopped() ApplicationModuleBaseClass<TModule>.OnStopping() object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods GenericExtensions.When<TObject>(TObject?, bool, Func<TObject?, TObject?>?) Constructors AspNetModuleBaseClass() Initializes a new instance of the AspNetModuleBaseClass<TModule> class. protected AspNetModuleBaseClass() AspNetModuleBaseClass(string?, string?, string?, params string?[]?) Initializes a new instance of the AspNetModuleBaseClass<TModule> class. protected AspNetModuleBaseClass(string? name, string? category, string? contentPath, params string?[]? tags) Parameters name string The name. category string The category. contentPath string The content path. tags string[] The tags. Methods ConfigureApplication(IApplicationBuilder?, IConfiguration?, IHostEnvironment?) Configures the application. public virtual IApplicationBuilder? ConfigureApplication(IApplicationBuilder? applicationBuilder, IConfiguration? configuration, IHostEnvironment? environment) Parameters applicationBuilder IApplicationBuilder The application builder. configuration IConfiguration The configuration. environment IHostEnvironment The host environment. Returns IApplicationBuilder The application builder. ConfigureRoutes(IEndpointRouteBuilder?, IConfiguration?, IHostEnvironment?) Configures the routes. public virtual IEndpointRouteBuilder? ConfigureRoutes(IEndpointRouteBuilder? endpoints, IConfiguration? configuration, IHostEnvironment? environment) Parameters endpoints IEndpointRouteBuilder Endpoint route builder. configuration IConfiguration The configuration. environment IHostEnvironment The host environment. Returns IEndpointRouteBuilder The endpoint route builder. ConfigureWebHostSettings(IWebHostBuilder?, IConfiguration?, IHostEnvironment?) Configures the host settings. public virtual IWebHostBuilder? ConfigureWebHostSettings(IWebHostBuilder? webHost, IConfiguration? configuration, IHostEnvironment? environment) Parameters webHost IWebHostBuilder The web host builder. configuration IConfiguration The configuration. environment IHostEnvironment The environment. Returns IWebHostBuilder The web host builder See Also ApplicationModuleBaseClass<TModule> IAspNetModule"
  },
  "api/Gestalt.ASPNet.BaseClasses.html": {
    "href": "api/Gestalt.ASPNet.BaseClasses.html",
    "title": "Namespace Gestalt.ASPNet.BaseClasses | Gestalt API Reference",
    "keywords": "Namespace Gestalt.ASPNet.BaseClasses Classes AspNetModuleBaseClass<TModule> Base class for ASP.NET modules."
  },
  "api/Gestalt.ASPNet.Controllers.BaseClasses.ControllerModuleBaseClass-1.html": {
    "href": "api/Gestalt.ASPNet.Controllers.BaseClasses.ControllerModuleBaseClass-1.html",
    "title": "Class ControllerModuleBaseClass<TModule> | Gestalt API Reference",
    "keywords": "Class ControllerModuleBaseClass<TModule> Namespace Gestalt.ASPNet.Controllers.BaseClasses Assembly Gestalt.ASPNet.Controllers.dll MVC controller only module base class public abstract class ControllerModuleBaseClass<TModule> : AspNetModuleBaseClass<TModule>, IEquatable<TModule>, IControllerModule, IAspNetModule, IApplicationModule where TModule : ControllerModuleBaseClass<TModule>, new() Type Parameters TModule The type of the module. Inheritance object ApplicationModuleBaseClass<TModule> AspNetModuleBaseClass<TModule> ControllerModuleBaseClass<TModule> Implements IEquatable<TModule> IControllerModule IAspNetModule IApplicationModule Inherited Members AspNetModuleBaseClass<TModule>.ConfigureApplication(IApplicationBuilder, IConfiguration, IHostEnvironment) AspNetModuleBaseClass<TModule>.ConfigureRoutes(IEndpointRouteBuilder, IConfiguration, IHostEnvironment) AspNetModuleBaseClass<TModule>.ConfigureWebHostSettings(IWebHostBuilder, IConfiguration, IHostEnvironment) ApplicationModuleBaseClass<TModule>.Category ApplicationModuleBaseClass<TModule>.ContentPath ApplicationModuleBaseClass<TModule>.ID ApplicationModuleBaseClass<TModule>.LastModified ApplicationModuleBaseClass<TModule>.Name ApplicationModuleBaseClass<TModule>.Order ApplicationModuleBaseClass<TModule>.Tags ApplicationModuleBaseClass<TModule>.Version ApplicationModuleBaseClass<TModule>.ConfigureConfigurationSettings(IConfigurationBuilder, IHostEnvironment, string[]) ApplicationModuleBaseClass<TModule>.ConfigureHostSettings(IHostBuilder, IConfiguration, IHostEnvironment) ApplicationModuleBaseClass<TModule>.ConfigureLoggingSettings(ILoggingBuilder, IConfiguration, IHostEnvironment) ApplicationModuleBaseClass<TModule>.ConfigureMetrics(IMetricsBuilder, IConfiguration, IHostEnvironment) ApplicationModuleBaseClass<TModule>.ConfigureServices(IServiceCollection, IConfiguration, IHostEnvironment) ApplicationModuleBaseClass<TModule>.Equals(object) ApplicationModuleBaseClass<TModule>.Equals(TModule) ApplicationModuleBaseClass<TModule>.GetHashCode() ApplicationModuleBaseClass<TModule>.OnStarted() ApplicationModuleBaseClass<TModule>.OnStopped() ApplicationModuleBaseClass<TModule>.OnStopping() object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods GenericExtensions.When<TObject>(TObject?, bool, Func<TObject?, TObject?>?) Constructors ControllerModuleBaseClass() Initializes a new instance of the ControllerModuleBaseClass<TModule> class. protected ControllerModuleBaseClass() ControllerModuleBaseClass(string?, string?, string?, params string?[]?) Initializes a new instance of the ControllerModuleBaseClass<TModule> class. protected ControllerModuleBaseClass(string? name, string? category, string? contentPath, params string?[]? tags) Parameters name string The name. category string The category. contentPath string The content path. tags string[] The tags. Methods ConfigureMVC(IMvcBuilder?, IConfiguration?, IHostEnvironment?) Configures the MVC framework. public virtual IMvcBuilder? ConfigureMVC(IMvcBuilder? mVCBuilder, IConfiguration? configuration, IHostEnvironment? environment) Parameters mVCBuilder IMvcBuilder MVC builder. configuration IConfiguration Configuration environment IHostEnvironment Host environment. Returns IMvcBuilder The MVC builder Options(MvcOptions?, IConfiguration?, IHostEnvironment?) Configures the MVC options. public virtual MvcOptions? Options(MvcOptions? options, IConfiguration? configuration, IHostEnvironment? environment) Parameters options MvcOptions MVC options. configuration IConfiguration Configuration environment IHostEnvironment Host environment. Returns MvcOptions The MVC options See Also AspNetModuleBaseClass<TModule> IControllerModule"
  },
  "api/Gestalt.ASPNet.Controllers.BaseClasses.html": {
    "href": "api/Gestalt.ASPNet.Controllers.BaseClasses.html",
    "title": "Namespace Gestalt.ASPNet.Controllers.BaseClasses | Gestalt API Reference",
    "keywords": "Namespace Gestalt.ASPNet.Controllers.BaseClasses Classes ControllerModuleBaseClass<TModule> MVC controller only module base class"
  },
  "api/Gestalt.ASPNet.Controllers.ControllerFramework.html": {
    "href": "api/Gestalt.ASPNet.Controllers.ControllerFramework.html",
    "title": "Class ControllerFramework | Gestalt API Reference",
    "keywords": "Class ControllerFramework Namespace Gestalt.ASPNet.Controllers Assembly Gestalt.ASPNet.Controllers.dll MVC Framework controller only class public class ControllerFramework : ApplicationFrameworkBaseClass<ControllerFramework, IControllerModule>, IEquatable<IApplicationFramework>, IApplicationFramework Inheritance object ApplicationFrameworkBaseClass<ControllerFramework, IControllerModule> ControllerFramework Implements IEquatable<IApplicationFramework> IApplicationFramework Inherited Members ApplicationFrameworkBaseClass<ControllerFramework, IControllerModule>.ID ApplicationFrameworkBaseClass<ControllerFramework, IControllerModule>.LastModified ApplicationFrameworkBaseClass<ControllerFramework, IControllerModule>.Name ApplicationFrameworkBaseClass<ControllerFramework, IControllerModule>.Order ApplicationFrameworkBaseClass<ControllerFramework, IControllerModule>.Version ApplicationFrameworkBaseClass<ControllerFramework, IControllerModule>.Configure(IApplicationModule[], IServiceCollection, IConfiguration, IHostEnvironment) ApplicationFrameworkBaseClass<ControllerFramework, IControllerModule>.Equals(object) ApplicationFrameworkBaseClass<ControllerFramework, IControllerModule>.Equals(IApplicationFramework) ApplicationFrameworkBaseClass<ControllerFramework, IControllerModule>.GetHashCode() ApplicationFrameworkBaseClass<ControllerFramework, IControllerModule>.ConfigureModules(IControllerModule[], IServiceCollection, IConfiguration, IHostEnvironment) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods GenericExtensions.When<TObject>(TObject?, bool, Func<TObject?, TObject?>?) Methods ConfigureModules(IControllerModule[], IServiceCollection?, IConfiguration?, IHostEnvironment?) Calls the appropriate methods on the modules to configure the application. protected override void ConfigureModules(IControllerModule[] modules, IServiceCollection? services, IConfiguration? configuration, IHostEnvironment? environment) Parameters modules IControllerModule[] The modules. services IServiceCollection The services. configuration IConfiguration The application configuration. environment IHostEnvironment The host environment. See Also ApplicationFrameworkBaseClass<TApplicationFramework, TModule>"
  },
  "api/Gestalt.ASPNet.Controllers.Interfaces.IControllerModule.html": {
    "href": "api/Gestalt.ASPNet.Controllers.Interfaces.IControllerModule.html",
    "title": "Interface IControllerModule | Gestalt API Reference",
    "keywords": "Interface IControllerModule Namespace Gestalt.ASPNet.Controllers.Interfaces Assembly Gestalt.ASPNet.Controllers.dll Module interface for ASP.NET MVC controller only functionality. public interface IControllerModule : IAspNetModule, IApplicationModule Inherited Members IAspNetModule.ConfigureApplication(IApplicationBuilder, IConfiguration, IHostEnvironment) IAspNetModule.ConfigureRoutes(IEndpointRouteBuilder, IConfiguration, IHostEnvironment) IAspNetModule.ConfigureWebHostSettings(IWebHostBuilder, IConfiguration, IHostEnvironment) IApplicationModule.Category IApplicationModule.ContentPath IApplicationModule.ID IApplicationModule.LastModified IApplicationModule.Name IApplicationModule.Order IApplicationModule.Tags IApplicationModule.Version IApplicationModule.ConfigureConfigurationSettings(IConfigurationBuilder, IHostEnvironment, string[]) IApplicationModule.ConfigureHostSettings(IHostBuilder, IConfiguration, IHostEnvironment) IApplicationModule.ConfigureLoggingSettings(ILoggingBuilder, IConfiguration, IHostEnvironment) IApplicationModule.ConfigureMetrics(IMetricsBuilder, IConfiguration, IHostEnvironment) IApplicationModule.ConfigureServices(IServiceCollection, IConfiguration, IHostEnvironment) IApplicationModule.OnStarted() IApplicationModule.OnStopped() IApplicationModule.OnStopping() Extension Methods GenericExtensions.When<TObject>(TObject?, bool, Func<TObject?, TObject?>?) Methods ConfigureMVC(IMvcBuilder?, IConfiguration?, IHostEnvironment?) Configures the MVC framework. IMvcBuilder? ConfigureMVC(IMvcBuilder? mVCBuilder, IConfiguration? configuration, IHostEnvironment? environment) Parameters mVCBuilder IMvcBuilder MVC builder. configuration IConfiguration Configuration environment IHostEnvironment Host environment. Returns IMvcBuilder The MVC builder Options(MvcOptions?, IConfiguration?, IHostEnvironment?) Configures the MVC options. MvcOptions? Options(MvcOptions? options, IConfiguration? configuration, IHostEnvironment? environment) Parameters options MvcOptions MVC options. configuration IConfiguration Configuration environment IHostEnvironment Host environment. Returns MvcOptions The MVC options See Also IAspNetModule"
  },
  "api/Gestalt.ASPNet.Controllers.Interfaces.html": {
    "href": "api/Gestalt.ASPNet.Controllers.Interfaces.html",
    "title": "Namespace Gestalt.ASPNet.Controllers.Interfaces | Gestalt API Reference",
    "keywords": "Namespace Gestalt.ASPNet.Controllers.Interfaces Interfaces IControllerModule Module interface for ASP.NET MVC controller only functionality."
  },
  "api/Gestalt.ASPNet.Controllers.html": {
    "href": "api/Gestalt.ASPNet.Controllers.html",
    "title": "Namespace Gestalt.ASPNet.Controllers | Gestalt API Reference",
    "keywords": "Namespace Gestalt.ASPNet.Controllers Classes ControllerFramework MVC Framework controller only class"
  },
  "api/Gestalt.ASPNet.ExtensionMethods.WebApplicationBuilderExtensions.html": {
    "href": "api/Gestalt.ASPNet.ExtensionMethods.WebApplicationBuilderExtensions.html",
    "title": "Class WebApplicationBuilderExtensions | Gestalt API Reference",
    "keywords": "Class WebApplicationBuilderExtensions Namespace Gestalt.ASPNet.ExtensionMethods Assembly Gestalt.ASPNet.dll WebApplicationBuilder Extensions public static class WebApplicationBuilderExtensions Inheritance object WebApplicationBuilderExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods UseGestalt(WebApplicationBuilder?, string?[]?, params Assembly?[]?) Sets up the Gestalt application modules. public static WebApplication? UseGestalt(this WebApplicationBuilder? app, string?[]? args, params Assembly?[]? assemblies) Parameters app WebApplicationBuilder Application builder args string[] The command line arguments assemblies Assembly[] The assemblies to search for modules, if empty the base application directory is searched. Returns WebApplication The host application builder."
  },
  "api/Gestalt.ASPNet.ExtensionMethods.html": {
    "href": "api/Gestalt.ASPNet.ExtensionMethods.html",
    "title": "Namespace Gestalt.ASPNet.ExtensionMethods | Gestalt API Reference",
    "keywords": "Namespace Gestalt.ASPNet.ExtensionMethods Classes WebApplicationBuilderExtensions WebApplicationBuilder Extensions"
  },
  "api/Gestalt.ASPNet.Interfaces.IAspNetModule.html": {
    "href": "api/Gestalt.ASPNet.Interfaces.IAspNetModule.html",
    "title": "Interface IAspNetModule | Gestalt API Reference",
    "keywords": "Interface IAspNetModule Namespace Gestalt.ASPNet.Interfaces Assembly Gestalt.ASPNet.dll ASP.NET Module public interface IAspNetModule : IApplicationModule Inherited Members IApplicationModule.Category IApplicationModule.ContentPath IApplicationModule.ID IApplicationModule.LastModified IApplicationModule.Name IApplicationModule.Order IApplicationModule.Tags IApplicationModule.Version IApplicationModule.ConfigureConfigurationSettings(IConfigurationBuilder, IHostEnvironment, string[]) IApplicationModule.ConfigureHostSettings(IHostBuilder, IConfiguration, IHostEnvironment) IApplicationModule.ConfigureLoggingSettings(ILoggingBuilder, IConfiguration, IHostEnvironment) IApplicationModule.ConfigureMetrics(IMetricsBuilder, IConfiguration, IHostEnvironment) IApplicationModule.ConfigureServices(IServiceCollection, IConfiguration, IHostEnvironment) IApplicationModule.OnStarted() IApplicationModule.OnStopped() IApplicationModule.OnStopping() Extension Methods GenericExtensions.When<TObject>(TObject?, bool, Func<TObject?, TObject?>?) Methods ConfigureApplication(IApplicationBuilder?, IConfiguration?, IHostEnvironment?) Called to configure the application. IApplicationBuilder? ConfigureApplication(IApplicationBuilder? applicationBuilder, IConfiguration? configuration, IHostEnvironment? environment) Parameters applicationBuilder IApplicationBuilder The application builder. configuration IConfiguration The configuration. environment IHostEnvironment The host environment. Returns IApplicationBuilder The application builder. ConfigureRoutes(IEndpointRouteBuilder, IConfiguration?, IHostEnvironment?) Configures the routes. IEndpointRouteBuilder? ConfigureRoutes(IEndpointRouteBuilder endpoints, IConfiguration? configuration, IHostEnvironment? environment) Parameters endpoints IEndpointRouteBuilder Endpoint route builder. configuration IConfiguration The configuration. environment IHostEnvironment The host environment. Returns IEndpointRouteBuilder The endpoint route builder. ConfigureWebHostSettings(IWebHostBuilder?, IConfiguration?, IHostEnvironment?) Configures the host settings. IWebHostBuilder? ConfigureWebHostSettings(IWebHostBuilder? webHost, IConfiguration? configuration, IHostEnvironment? environment) Parameters webHost IWebHostBuilder The web host builder. configuration IConfiguration The configuration. environment IHostEnvironment The environment. Returns IWebHostBuilder The web host builder"
  },
  "api/Gestalt.ASPNet.Interfaces.html": {
    "href": "api/Gestalt.ASPNet.Interfaces.html",
    "title": "Namespace Gestalt.ASPNet.Interfaces | Gestalt API Reference",
    "keywords": "Namespace Gestalt.ASPNet.Interfaces Interfaces IAspNetModule ASP.NET Module"
  },
  "api/Gestalt.ASPNet.MVC.BaseClasses.MvcModuleBaseClass-1.html": {
    "href": "api/Gestalt.ASPNet.MVC.BaseClasses.MvcModuleBaseClass-1.html",
    "title": "Class MvcModuleBaseClass<TModule> | Gestalt API Reference",
    "keywords": "Class MvcModuleBaseClass<TModule> Namespace Gestalt.ASPNet.MVC.BaseClasses Assembly Gestalt.ASPNet.MVC.dll MVC Module base class public abstract class MvcModuleBaseClass<TModule> : AspNetModuleBaseClass<TModule>, IEquatable<TModule>, IMvcModule, IAspNetModule, IApplicationModule where TModule : MvcModuleBaseClass<TModule>, new() Type Parameters TModule The type of the module. Inheritance object ApplicationModuleBaseClass<TModule> AspNetModuleBaseClass<TModule> MvcModuleBaseClass<TModule> Implements IEquatable<TModule> IMvcModule IAspNetModule IApplicationModule Inherited Members AspNetModuleBaseClass<TModule>.ConfigureApplication(IApplicationBuilder, IConfiguration, IHostEnvironment) AspNetModuleBaseClass<TModule>.ConfigureRoutes(IEndpointRouteBuilder, IConfiguration, IHostEnvironment) AspNetModuleBaseClass<TModule>.ConfigureWebHostSettings(IWebHostBuilder, IConfiguration, IHostEnvironment) ApplicationModuleBaseClass<TModule>.Category ApplicationModuleBaseClass<TModule>.ContentPath ApplicationModuleBaseClass<TModule>.ID ApplicationModuleBaseClass<TModule>.LastModified ApplicationModuleBaseClass<TModule>.Name ApplicationModuleBaseClass<TModule>.Order ApplicationModuleBaseClass<TModule>.Tags ApplicationModuleBaseClass<TModule>.Version ApplicationModuleBaseClass<TModule>.ConfigureConfigurationSettings(IConfigurationBuilder, IHostEnvironment, string[]) ApplicationModuleBaseClass<TModule>.ConfigureHostSettings(IHostBuilder, IConfiguration, IHostEnvironment) ApplicationModuleBaseClass<TModule>.ConfigureLoggingSettings(ILoggingBuilder, IConfiguration, IHostEnvironment) ApplicationModuleBaseClass<TModule>.ConfigureMetrics(IMetricsBuilder, IConfiguration, IHostEnvironment) ApplicationModuleBaseClass<TModule>.ConfigureServices(IServiceCollection, IConfiguration, IHostEnvironment) ApplicationModuleBaseClass<TModule>.Equals(object) ApplicationModuleBaseClass<TModule>.Equals(TModule) ApplicationModuleBaseClass<TModule>.GetHashCode() ApplicationModuleBaseClass<TModule>.OnStarted() ApplicationModuleBaseClass<TModule>.OnStopped() ApplicationModuleBaseClass<TModule>.OnStopping() object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods GenericExtensions.When<TObject>(TObject?, bool, Func<TObject?, TObject?>?) Constructors MvcModuleBaseClass() Initializes a new instance of the MvcModuleBaseClass<TModule> class. protected MvcModuleBaseClass() MvcModuleBaseClass(string?, string?, string?, params string?[]?) Initializes a new instance of the MvcModuleBaseClass<TModule> class. protected MvcModuleBaseClass(string? name, string? category, string? contentPath, params string?[]? tags) Parameters name string The name. category string The category. contentPath string The content path. tags string[] The tags. Methods ConfigureMVC(IMvcBuilder?, IConfiguration?, IHostEnvironment?) Configures the MVC framework. public virtual IMvcBuilder? ConfigureMVC(IMvcBuilder? mVCBuilder, IConfiguration? configuration, IHostEnvironment? environment) Parameters mVCBuilder IMvcBuilder MVC builder. configuration IConfiguration Configuration environment IHostEnvironment Host environment. Returns IMvcBuilder The MVC builder Options(MvcOptions?, IConfiguration?, IHostEnvironment?) Configures the MVC options. public virtual MvcOptions? Options(MvcOptions? options, IConfiguration? configuration, IHostEnvironment? environment) Parameters options MvcOptions MVC options. configuration IConfiguration Configuration environment IHostEnvironment Host environment. Returns MvcOptions The MVC options See Also AspNetModuleBaseClass<TModule> IMvcModule"
  },
  "api/Gestalt.ASPNet.MVC.BaseClasses.html": {
    "href": "api/Gestalt.ASPNet.MVC.BaseClasses.html",
    "title": "Namespace Gestalt.ASPNet.MVC.BaseClasses | Gestalt API Reference",
    "keywords": "Namespace Gestalt.ASPNet.MVC.BaseClasses Classes MvcModuleBaseClass<TModule> MVC Module base class"
  },
  "api/Gestalt.ASPNet.MVC.Interfaces.IMvcModule.html": {
    "href": "api/Gestalt.ASPNet.MVC.Interfaces.IMvcModule.html",
    "title": "Interface IMvcModule | Gestalt API Reference",
    "keywords": "Interface IMvcModule Namespace Gestalt.ASPNet.MVC.Interfaces Assembly Gestalt.ASPNet.MVC.dll Module interface for ASP.NET MVC functionality. public interface IMvcModule : IAspNetModule, IApplicationModule Inherited Members IAspNetModule.ConfigureApplication(IApplicationBuilder, IConfiguration, IHostEnvironment) IAspNetModule.ConfigureRoutes(IEndpointRouteBuilder, IConfiguration, IHostEnvironment) IAspNetModule.ConfigureWebHostSettings(IWebHostBuilder, IConfiguration, IHostEnvironment) IApplicationModule.Category IApplicationModule.ContentPath IApplicationModule.ID IApplicationModule.LastModified IApplicationModule.Name IApplicationModule.Order IApplicationModule.Tags IApplicationModule.Version IApplicationModule.ConfigureConfigurationSettings(IConfigurationBuilder, IHostEnvironment, string[]) IApplicationModule.ConfigureHostSettings(IHostBuilder, IConfiguration, IHostEnvironment) IApplicationModule.ConfigureLoggingSettings(ILoggingBuilder, IConfiguration, IHostEnvironment) IApplicationModule.ConfigureMetrics(IMetricsBuilder, IConfiguration, IHostEnvironment) IApplicationModule.ConfigureServices(IServiceCollection, IConfiguration, IHostEnvironment) IApplicationModule.OnStarted() IApplicationModule.OnStopped() IApplicationModule.OnStopping() Extension Methods GenericExtensions.When<TObject>(TObject?, bool, Func<TObject?, TObject?>?) Methods ConfigureMVC(IMvcBuilder?, IConfiguration?, IHostEnvironment?) Configures the MVC framework. IMvcBuilder? ConfigureMVC(IMvcBuilder? mVCBuilder, IConfiguration? configuration, IHostEnvironment? environment) Parameters mVCBuilder IMvcBuilder MVC builder. configuration IConfiguration Configuration environment IHostEnvironment Host environment. Returns IMvcBuilder The MVC builder Options(MvcOptions?, IConfiguration?, IHostEnvironment?) Configures the MVC options. MvcOptions? Options(MvcOptions? options, IConfiguration? configuration, IHostEnvironment? environment) Parameters options MvcOptions MVC options. configuration IConfiguration Configuration environment IHostEnvironment Host environment. Returns MvcOptions The MVC options See Also IAspNetModule"
  },
  "api/Gestalt.ASPNet.MVC.Interfaces.html": {
    "href": "api/Gestalt.ASPNet.MVC.Interfaces.html",
    "title": "Namespace Gestalt.ASPNet.MVC.Interfaces | Gestalt API Reference",
    "keywords": "Namespace Gestalt.ASPNet.MVC.Interfaces Interfaces IMvcModule Module interface for ASP.NET MVC functionality."
  },
  "api/Gestalt.ASPNet.MVC.MvcFramework.html": {
    "href": "api/Gestalt.ASPNet.MVC.MvcFramework.html",
    "title": "Class MvcFramework | Gestalt API Reference",
    "keywords": "Class MvcFramework Namespace Gestalt.ASPNet.MVC Assembly Gestalt.ASPNet.MVC.dll MVC Framework class public class MvcFramework : ApplicationFrameworkBaseClass<MvcFramework, IMvcModule>, IEquatable<IApplicationFramework>, IApplicationFramework Inheritance object ApplicationFrameworkBaseClass<MvcFramework, IMvcModule> MvcFramework Implements IEquatable<IApplicationFramework> IApplicationFramework Inherited Members ApplicationFrameworkBaseClass<MvcFramework, IMvcModule>.ID ApplicationFrameworkBaseClass<MvcFramework, IMvcModule>.LastModified ApplicationFrameworkBaseClass<MvcFramework, IMvcModule>.Name ApplicationFrameworkBaseClass<MvcFramework, IMvcModule>.Order ApplicationFrameworkBaseClass<MvcFramework, IMvcModule>.Version ApplicationFrameworkBaseClass<MvcFramework, IMvcModule>.Configure(IApplicationModule[], IServiceCollection, IConfiguration, IHostEnvironment) ApplicationFrameworkBaseClass<MvcFramework, IMvcModule>.Equals(object) ApplicationFrameworkBaseClass<MvcFramework, IMvcModule>.Equals(IApplicationFramework) ApplicationFrameworkBaseClass<MvcFramework, IMvcModule>.GetHashCode() ApplicationFrameworkBaseClass<MvcFramework, IMvcModule>.ConfigureModules(IMvcModule[], IServiceCollection, IConfiguration, IHostEnvironment) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods GenericExtensions.When<TObject>(TObject?, bool, Func<TObject?, TObject?>?) Methods ConfigureModules(IMvcModule[], IServiceCollection?, IConfiguration?, IHostEnvironment?) Calls the appropriate methods on the modules to configure the application. protected override void ConfigureModules(IMvcModule[] modules, IServiceCollection? services, IConfiguration? configuration, IHostEnvironment? environment) Parameters modules IMvcModule[] The modules. services IServiceCollection The services. configuration IConfiguration The application configuration. environment IHostEnvironment The host environment. See Also ApplicationFrameworkBaseClass<TApplicationFramework, TModule>"
  },
  "api/Gestalt.ASPNet.MVC.html": {
    "href": "api/Gestalt.ASPNet.MVC.html",
    "title": "Namespace Gestalt.ASPNet.MVC | Gestalt API Reference",
    "keywords": "Namespace Gestalt.ASPNet.MVC Classes MvcFramework MVC Framework class"
  },
  "api/Gestalt.ASPNet.RazorPages.BaseClasses.RazorPagesModuleBaseClass-1.html": {
    "href": "api/Gestalt.ASPNet.RazorPages.BaseClasses.RazorPagesModuleBaseClass-1.html",
    "title": "Class RazorPagesModuleBaseClass<TModule> | Gestalt API Reference",
    "keywords": "Class RazorPagesModuleBaseClass<TModule> Namespace Gestalt.ASPNet.RazorPages.BaseClasses Assembly Gestalt.ASPNet.RazorPages.dll Razor Pages Module base class public abstract class RazorPagesModuleBaseClass<TModule> : AspNetModuleBaseClass<TModule>, IEquatable<TModule>, IRazorPagesModule, IAspNetModule, IApplicationModule where TModule : RazorPagesModuleBaseClass<TModule>, new() Type Parameters TModule The type of the module. Inheritance object ApplicationModuleBaseClass<TModule> AspNetModuleBaseClass<TModule> RazorPagesModuleBaseClass<TModule> Implements IEquatable<TModule> IRazorPagesModule IAspNetModule IApplicationModule Inherited Members AspNetModuleBaseClass<TModule>.ConfigureApplication(IApplicationBuilder, IConfiguration, IHostEnvironment) AspNetModuleBaseClass<TModule>.ConfigureRoutes(IEndpointRouteBuilder, IConfiguration, IHostEnvironment) AspNetModuleBaseClass<TModule>.ConfigureWebHostSettings(IWebHostBuilder, IConfiguration, IHostEnvironment) ApplicationModuleBaseClass<TModule>.Category ApplicationModuleBaseClass<TModule>.ContentPath ApplicationModuleBaseClass<TModule>.ID ApplicationModuleBaseClass<TModule>.LastModified ApplicationModuleBaseClass<TModule>.Name ApplicationModuleBaseClass<TModule>.Order ApplicationModuleBaseClass<TModule>.Tags ApplicationModuleBaseClass<TModule>.Version ApplicationModuleBaseClass<TModule>.ConfigureConfigurationSettings(IConfigurationBuilder, IHostEnvironment, string[]) ApplicationModuleBaseClass<TModule>.ConfigureHostSettings(IHostBuilder, IConfiguration, IHostEnvironment) ApplicationModuleBaseClass<TModule>.ConfigureLoggingSettings(ILoggingBuilder, IConfiguration, IHostEnvironment) ApplicationModuleBaseClass<TModule>.ConfigureMetrics(IMetricsBuilder, IConfiguration, IHostEnvironment) ApplicationModuleBaseClass<TModule>.ConfigureServices(IServiceCollection, IConfiguration, IHostEnvironment) ApplicationModuleBaseClass<TModule>.Equals(object) ApplicationModuleBaseClass<TModule>.Equals(TModule) ApplicationModuleBaseClass<TModule>.GetHashCode() ApplicationModuleBaseClass<TModule>.OnStarted() ApplicationModuleBaseClass<TModule>.OnStopped() ApplicationModuleBaseClass<TModule>.OnStopping() object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods GenericExtensions.When<TObject>(TObject?, bool, Func<TObject?, TObject?>?) Constructors RazorPagesModuleBaseClass() Initializes a new instance of the RazorPagesModuleBaseClass<TModule> class. protected RazorPagesModuleBaseClass() RazorPagesModuleBaseClass(string?, string?, string?, params string[]) Initializes a new instance of the RazorPagesModuleBaseClass<TModule> class. protected RazorPagesModuleBaseClass(string? name, string? category, string? contentPath, params string[] tags) Parameters name string The name. category string The category. contentPath string The content path. tags string[] The tags. Methods ConfigureRazorPages(IMvcBuilder?, IConfiguration?, IHostEnvironment?) Configures the Razor Pages framework. public virtual IMvcBuilder? ConfigureRazorPages(IMvcBuilder? mVCBuilder, IConfiguration? configuration, IHostEnvironment? environment) Parameters mVCBuilder IMvcBuilder Razor Pages builder. configuration IConfiguration Configuration environment IHostEnvironment Host environment. Returns IMvcBuilder The Razor Pages builder Options(RazorPagesOptions?, IConfiguration?, IHostEnvironment?) Configures the Razor Pages options. public virtual RazorPagesOptions? Options(RazorPagesOptions? options, IConfiguration? configuration, IHostEnvironment? environment) Parameters options RazorPagesOptions Razor Pages options. configuration IConfiguration Configuration environment IHostEnvironment Host environment. Returns RazorPagesOptions The Razor Pages options See Also AspNetModuleBaseClass<TModule> IRazorPagesModule"
  },
  "api/Gestalt.ASPNet.RazorPages.BaseClasses.html": {
    "href": "api/Gestalt.ASPNet.RazorPages.BaseClasses.html",
    "title": "Namespace Gestalt.ASPNet.RazorPages.BaseClasses | Gestalt API Reference",
    "keywords": "Namespace Gestalt.ASPNet.RazorPages.BaseClasses Classes RazorPagesModuleBaseClass<TModule> Razor Pages Module base class"
  },
  "api/Gestalt.ASPNet.RazorPages.Interfaces.IRazorPagesModule.html": {
    "href": "api/Gestalt.ASPNet.RazorPages.Interfaces.IRazorPagesModule.html",
    "title": "Interface IRazorPagesModule | Gestalt API Reference",
    "keywords": "Interface IRazorPagesModule Namespace Gestalt.ASPNet.RazorPages.Interfaces Assembly Gestalt.ASPNet.RazorPages.dll Razor Pages Module Interface public interface IRazorPagesModule : IAspNetModule, IApplicationModule Inherited Members IAspNetModule.ConfigureApplication(IApplicationBuilder, IConfiguration, IHostEnvironment) IAspNetModule.ConfigureRoutes(IEndpointRouteBuilder, IConfiguration, IHostEnvironment) IAspNetModule.ConfigureWebHostSettings(IWebHostBuilder, IConfiguration, IHostEnvironment) IApplicationModule.Category IApplicationModule.ContentPath IApplicationModule.ID IApplicationModule.LastModified IApplicationModule.Name IApplicationModule.Order IApplicationModule.Tags IApplicationModule.Version IApplicationModule.ConfigureConfigurationSettings(IConfigurationBuilder, IHostEnvironment, string[]) IApplicationModule.ConfigureHostSettings(IHostBuilder, IConfiguration, IHostEnvironment) IApplicationModule.ConfigureLoggingSettings(ILoggingBuilder, IConfiguration, IHostEnvironment) IApplicationModule.ConfigureMetrics(IMetricsBuilder, IConfiguration, IHostEnvironment) IApplicationModule.ConfigureServices(IServiceCollection, IConfiguration, IHostEnvironment) IApplicationModule.OnStarted() IApplicationModule.OnStopped() IApplicationModule.OnStopping() Extension Methods GenericExtensions.When<TObject>(TObject?, bool, Func<TObject?, TObject?>?) Methods ConfigureRazorPages(IMvcBuilder?, IConfiguration?, IHostEnvironment?) Configures the RazorPages framework. IMvcBuilder? ConfigureRazorPages(IMvcBuilder? mVCBuilder, IConfiguration? configuration, IHostEnvironment? environment) Parameters mVCBuilder IMvcBuilder RazorPages builder. configuration IConfiguration Configuration environment IHostEnvironment Host environment. Returns IMvcBuilder The RazorPages builder Options(RazorPagesOptions?, IConfiguration?, IHostEnvironment?) Configures the RazorPages options. RazorPagesOptions? Options(RazorPagesOptions? options, IConfiguration? configuration, IHostEnvironment? environment) Parameters options RazorPagesOptions RazorPages options. configuration IConfiguration Configuration environment IHostEnvironment Host environment. Returns RazorPagesOptions The RazorPages options See Also IAspNetModule"
  },
  "api/Gestalt.ASPNet.RazorPages.Interfaces.html": {
    "href": "api/Gestalt.ASPNet.RazorPages.Interfaces.html",
    "title": "Namespace Gestalt.ASPNet.RazorPages.Interfaces | Gestalt API Reference",
    "keywords": "Namespace Gestalt.ASPNet.RazorPages.Interfaces Interfaces IRazorPagesModule Razor Pages Module Interface"
  },
  "api/Gestalt.ASPNet.RazorPages.RazorPagesFramework.html": {
    "href": "api/Gestalt.ASPNet.RazorPages.RazorPagesFramework.html",
    "title": "Class RazorPagesFramework | Gestalt API Reference",
    "keywords": "Class RazorPagesFramework Namespace Gestalt.ASPNet.RazorPages Assembly Gestalt.ASPNet.RazorPages.dll Razor Pages Framework class public class RazorPagesFramework : ApplicationFrameworkBaseClass<RazorPagesFramework, IRazorPagesModule>, IEquatable<IApplicationFramework>, IApplicationFramework Inheritance object ApplicationFrameworkBaseClass<RazorPagesFramework, IRazorPagesModule> RazorPagesFramework Implements IEquatable<IApplicationFramework> IApplicationFramework Inherited Members ApplicationFrameworkBaseClass<RazorPagesFramework, IRazorPagesModule>.ID ApplicationFrameworkBaseClass<RazorPagesFramework, IRazorPagesModule>.LastModified ApplicationFrameworkBaseClass<RazorPagesFramework, IRazorPagesModule>.Name ApplicationFrameworkBaseClass<RazorPagesFramework, IRazorPagesModule>.Order ApplicationFrameworkBaseClass<RazorPagesFramework, IRazorPagesModule>.Version ApplicationFrameworkBaseClass<RazorPagesFramework, IRazorPagesModule>.Configure(IApplicationModule[], IServiceCollection, IConfiguration, IHostEnvironment) ApplicationFrameworkBaseClass<RazorPagesFramework, IRazorPagesModule>.Equals(object) ApplicationFrameworkBaseClass<RazorPagesFramework, IRazorPagesModule>.Equals(IApplicationFramework) ApplicationFrameworkBaseClass<RazorPagesFramework, IRazorPagesModule>.GetHashCode() ApplicationFrameworkBaseClass<RazorPagesFramework, IRazorPagesModule>.ConfigureModules(IRazorPagesModule[], IServiceCollection, IConfiguration, IHostEnvironment) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods GenericExtensions.When<TObject>(TObject?, bool, Func<TObject?, TObject?>?) Methods ConfigureModules(IRazorPagesModule[], IServiceCollection?, IConfiguration?, IHostEnvironment?) Initializes a new instance of the RazorPagesFramework class. protected override void ConfigureModules(IRazorPagesModule[] modules, IServiceCollection? services, IConfiguration? configuration, IHostEnvironment? environment) Parameters modules IRazorPagesModule[] The modules. services IServiceCollection The services. configuration IConfiguration The configuration. environment IHostEnvironment The environment."
  },
  "api/Gestalt.ASPNet.RazorPages.html": {
    "href": "api/Gestalt.ASPNet.RazorPages.html",
    "title": "Namespace Gestalt.ASPNet.RazorPages | Gestalt API Reference",
    "keywords": "Namespace Gestalt.ASPNet.RazorPages Classes RazorPagesFramework Razor Pages Framework class"
  },
  "api/Gestalt.ASPNet.SignalR.BaseClasses.SignalRModuleBaseClass-1.html": {
    "href": "api/Gestalt.ASPNet.SignalR.BaseClasses.SignalRModuleBaseClass-1.html",
    "title": "Class SignalRModuleBaseClass<TModule> | Gestalt API Reference",
    "keywords": "Class SignalRModuleBaseClass<TModule> Namespace Gestalt.ASPNet.SignalR.BaseClasses Assembly Gestalt.ASPNet.SignalR.dll SignalR Module base class public abstract class SignalRModuleBaseClass<TModule> : AspNetModuleBaseClass<TModule>, IEquatable<TModule>, ISignalRModule, IAspNetModule, IApplicationModule where TModule : SignalRModuleBaseClass<TModule>, new() Type Parameters TModule The type of the module. Inheritance object ApplicationModuleBaseClass<TModule> AspNetModuleBaseClass<TModule> SignalRModuleBaseClass<TModule> Implements IEquatable<TModule> ISignalRModule IAspNetModule IApplicationModule Inherited Members AspNetModuleBaseClass<TModule>.ConfigureApplication(IApplicationBuilder, IConfiguration, IHostEnvironment) AspNetModuleBaseClass<TModule>.ConfigureRoutes(IEndpointRouteBuilder, IConfiguration, IHostEnvironment) AspNetModuleBaseClass<TModule>.ConfigureWebHostSettings(IWebHostBuilder, IConfiguration, IHostEnvironment) ApplicationModuleBaseClass<TModule>.Category ApplicationModuleBaseClass<TModule>.ContentPath ApplicationModuleBaseClass<TModule>.ID ApplicationModuleBaseClass<TModule>.LastModified ApplicationModuleBaseClass<TModule>.Name ApplicationModuleBaseClass<TModule>.Order ApplicationModuleBaseClass<TModule>.Tags ApplicationModuleBaseClass<TModule>.Version ApplicationModuleBaseClass<TModule>.ConfigureConfigurationSettings(IConfigurationBuilder, IHostEnvironment, string[]) ApplicationModuleBaseClass<TModule>.ConfigureHostSettings(IHostBuilder, IConfiguration, IHostEnvironment) ApplicationModuleBaseClass<TModule>.ConfigureLoggingSettings(ILoggingBuilder, IConfiguration, IHostEnvironment) ApplicationModuleBaseClass<TModule>.ConfigureMetrics(IMetricsBuilder, IConfiguration, IHostEnvironment) ApplicationModuleBaseClass<TModule>.ConfigureServices(IServiceCollection, IConfiguration, IHostEnvironment) ApplicationModuleBaseClass<TModule>.Equals(object) ApplicationModuleBaseClass<TModule>.Equals(TModule) ApplicationModuleBaseClass<TModule>.GetHashCode() ApplicationModuleBaseClass<TModule>.OnStarted() ApplicationModuleBaseClass<TModule>.OnStopped() ApplicationModuleBaseClass<TModule>.OnStopping() object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods GenericExtensions.When<TObject>(TObject?, bool, Func<TObject?, TObject?>?) Constructors SignalRModuleBaseClass() Initializes a new instance of the SignalRModuleBaseClass<TModule> class. protected SignalRModuleBaseClass() SignalRModuleBaseClass(string?, string?, string?, params string?[]?) Initializes a new instance of the SignalRModuleBaseClass<TModule> class. protected SignalRModuleBaseClass(string? name, string? category, string? contentPath, params string?[]? tags) Parameters name string The name. category string The category. contentPath string The content path. tags string[] The tags. Methods ConfigureSignalR(ISignalRServerBuilder?, IConfiguration?, IHostEnvironment?) Configures the SignalR framework. public virtual ISignalRServerBuilder? ConfigureSignalR(ISignalRServerBuilder? builder, IConfiguration? configuration, IHostEnvironment? environment) Parameters builder ISignalRServerBuilder SignalR builder. configuration IConfiguration Configuration environment IHostEnvironment Host environment. Returns ISignalRServerBuilder The SignalR builder Options(HubOptions?, IConfiguration?, IHostEnvironment?) Configures the SignalR options. public virtual HubOptions? Options(HubOptions? options, IConfiguration? configuration, IHostEnvironment? environment) Parameters options HubOptions SignalR options. configuration IConfiguration Configuration environment IHostEnvironment Host environment. Returns HubOptions The SignalR options See Also AspNetModuleBaseClass<TModule> ISignalRModule"
  },
  "api/Gestalt.ASPNet.SignalR.BaseClasses.html": {
    "href": "api/Gestalt.ASPNet.SignalR.BaseClasses.html",
    "title": "Namespace Gestalt.ASPNet.SignalR.BaseClasses | Gestalt API Reference",
    "keywords": "Namespace Gestalt.ASPNet.SignalR.BaseClasses Classes SignalRModuleBaseClass<TModule> SignalR Module base class"
  },
  "api/Gestalt.ASPNet.SignalR.Interfaces.ISignalRModule.html": {
    "href": "api/Gestalt.ASPNet.SignalR.Interfaces.ISignalRModule.html",
    "title": "Interface ISignalRModule | Gestalt API Reference",
    "keywords": "Interface ISignalRModule Namespace Gestalt.ASPNet.SignalR.Interfaces Assembly Gestalt.ASPNet.SignalR.dll Module interface for ASP.NET SignalR functionality. public interface ISignalRModule : IAspNetModule, IApplicationModule Inherited Members IAspNetModule.ConfigureApplication(IApplicationBuilder, IConfiguration, IHostEnvironment) IAspNetModule.ConfigureRoutes(IEndpointRouteBuilder, IConfiguration, IHostEnvironment) IAspNetModule.ConfigureWebHostSettings(IWebHostBuilder, IConfiguration, IHostEnvironment) IApplicationModule.Category IApplicationModule.ContentPath IApplicationModule.ID IApplicationModule.LastModified IApplicationModule.Name IApplicationModule.Order IApplicationModule.Tags IApplicationModule.Version IApplicationModule.ConfigureConfigurationSettings(IConfigurationBuilder, IHostEnvironment, string[]) IApplicationModule.ConfigureHostSettings(IHostBuilder, IConfiguration, IHostEnvironment) IApplicationModule.ConfigureLoggingSettings(ILoggingBuilder, IConfiguration, IHostEnvironment) IApplicationModule.ConfigureMetrics(IMetricsBuilder, IConfiguration, IHostEnvironment) IApplicationModule.ConfigureServices(IServiceCollection, IConfiguration, IHostEnvironment) IApplicationModule.OnStarted() IApplicationModule.OnStopped() IApplicationModule.OnStopping() Extension Methods GenericExtensions.When<TObject>(TObject?, bool, Func<TObject?, TObject?>?) Methods ConfigureSignalR(ISignalRServerBuilder?, IConfiguration?, IHostEnvironment?) Configures the SignalR framework. ISignalRServerBuilder? ConfigureSignalR(ISignalRServerBuilder? builder, IConfiguration? configuration, IHostEnvironment? environment) Parameters builder ISignalRServerBuilder SignalR builder. configuration IConfiguration Configuration environment IHostEnvironment Host environment. Returns ISignalRServerBuilder The SignalR builder Options(HubOptions?, IConfiguration?, IHostEnvironment?) Configures the SignalR options. HubOptions? Options(HubOptions? options, IConfiguration? configuration, IHostEnvironment? environment) Parameters options HubOptions SignalR options. configuration IConfiguration Configuration environment IHostEnvironment Host environment. Returns HubOptions The SignalR options See Also IAspNetModule"
  },
  "api/Gestalt.ASPNet.SignalR.Interfaces.html": {
    "href": "api/Gestalt.ASPNet.SignalR.Interfaces.html",
    "title": "Namespace Gestalt.ASPNet.SignalR.Interfaces | Gestalt API Reference",
    "keywords": "Namespace Gestalt.ASPNet.SignalR.Interfaces Interfaces ISignalRModule Module interface for ASP.NET SignalR functionality."
  },
  "api/Gestalt.ASPNet.SignalR.SignalRFramework.html": {
    "href": "api/Gestalt.ASPNet.SignalR.SignalRFramework.html",
    "title": "Class SignalRFramework | Gestalt API Reference",
    "keywords": "Class SignalRFramework Namespace Gestalt.ASPNet.SignalR Assembly Gestalt.ASPNet.SignalR.dll MVC Framework class public class SignalRFramework : ApplicationFrameworkBaseClass<SignalRFramework, ISignalRModule>, IEquatable<IApplicationFramework>, IApplicationFramework Inheritance object ApplicationFrameworkBaseClass<SignalRFramework, ISignalRModule> SignalRFramework Implements IEquatable<IApplicationFramework> IApplicationFramework Inherited Members ApplicationFrameworkBaseClass<SignalRFramework, ISignalRModule>.ID ApplicationFrameworkBaseClass<SignalRFramework, ISignalRModule>.LastModified ApplicationFrameworkBaseClass<SignalRFramework, ISignalRModule>.Name ApplicationFrameworkBaseClass<SignalRFramework, ISignalRModule>.Order ApplicationFrameworkBaseClass<SignalRFramework, ISignalRModule>.Version ApplicationFrameworkBaseClass<SignalRFramework, ISignalRModule>.Configure(IApplicationModule[], IServiceCollection, IConfiguration, IHostEnvironment) ApplicationFrameworkBaseClass<SignalRFramework, ISignalRModule>.Equals(object) ApplicationFrameworkBaseClass<SignalRFramework, ISignalRModule>.Equals(IApplicationFramework) ApplicationFrameworkBaseClass<SignalRFramework, ISignalRModule>.GetHashCode() ApplicationFrameworkBaseClass<SignalRFramework, ISignalRModule>.ConfigureModules(ISignalRModule[], IServiceCollection, IConfiguration, IHostEnvironment) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods GenericExtensions.When<TObject>(TObject?, bool, Func<TObject?, TObject?>?) Methods ConfigureModules(ISignalRModule[], IServiceCollection?, IConfiguration?, IHostEnvironment?) Calls the appropriate methods on the modules to configure the application. protected override void ConfigureModules(ISignalRModule[] modules, IServiceCollection? services, IConfiguration? configuration, IHostEnvironment? environment) Parameters modules ISignalRModule[] The modules. services IServiceCollection The services. configuration IConfiguration The application configuration. environment IHostEnvironment The host environment. See Also ApplicationFrameworkBaseClass<TApplicationFramework, TModule>"
  },
  "api/Gestalt.ASPNet.SignalR.html": {
    "href": "api/Gestalt.ASPNet.SignalR.html",
    "title": "Namespace Gestalt.ASPNet.SignalR | Gestalt API Reference",
    "keywords": "Namespace Gestalt.ASPNet.SignalR Classes SignalRFramework MVC Framework class"
  },
  "api/Gestalt.ASPNet.html": {
    "href": "api/Gestalt.ASPNet.html",
    "title": "Namespace Gestalt.ASPNet | Gestalt API Reference",
    "keywords": "Namespace Gestalt.ASPNet Classes AspNetApplication ASP.NET Application."
  },
  "api/Gestalt.Console.ConsoleApplication.html": {
    "href": "api/Gestalt.Console.ConsoleApplication.html",
    "title": "Class ConsoleApplication | Gestalt API Reference",
    "keywords": "Class ConsoleApplication Namespace Gestalt.Console Assembly Gestalt.Console.dll Console application class public class ConsoleApplication : ApplicationBaseClass, IApplication Inheritance object ApplicationBaseClass ConsoleApplication Implements IApplication Inherited Members ApplicationBaseClass.Name ApplicationBaseClass.Configuration ApplicationBaseClass.Environment ApplicationBaseClass.Frameworks ApplicationBaseClass.InternalLogger ApplicationBaseClass.Modules ApplicationBaseClass.ConfigureConfigurationSettings(IConfigurationBuilder, string[]) ApplicationBaseClass.ConfigureFrameworks(IServiceCollection) ApplicationBaseClass.ConfigureHostSettings(IHostBuilder) ApplicationBaseClass.ConfigureLoggingSettings(ILoggingBuilder) ApplicationBaseClass.ConfigureServices(IServiceCollection) ApplicationBaseClass.OnStarted() ApplicationBaseClass.OnStopped() ApplicationBaseClass.OnStopping() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods GenericExtensions.When<TObject>(TObject?, bool, Func<TObject?, TObject?>?) Constructors ConsoleApplication(IConfiguration?, IHostEnvironment?, params Assembly?[]?) Initializes a new instance of the ConsoleApplication class. public ConsoleApplication(IConfiguration? configuration, IHostEnvironment? env, params Assembly?[]? assemblies) Parameters configuration IConfiguration Configuration env IHostEnvironment Host environment assemblies Assembly[] Assemblies Methods ConfigureMetrics(IMetricsBuilder?) Configures the metrics settings for the application. public void ConfigureMetrics(IMetricsBuilder? metricsBuilder) Parameters metricsBuilder IMetricsBuilder The metrics builder"
  },
  "api/Gestalt.Console.ExtensionMethods.HostApplicationBuilderExtensions.html": {
    "href": "api/Gestalt.Console.ExtensionMethods.HostApplicationBuilderExtensions.html",
    "title": "Class HostApplicationBuilderExtensions | Gestalt API Reference",
    "keywords": "Class HostApplicationBuilderExtensions Namespace Gestalt.Console.ExtensionMethods Assembly Gestalt.Console.dll Host application builder extensions public static class HostApplicationBuilderExtensions Inheritance object HostApplicationBuilderExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods UseGestalt(HostApplicationBuilder?, string?[]?, params Assembly?[]?) Uses the Gestalt framework. public static IHost? UseGestalt(this HostApplicationBuilder? app, string?[]? args, params Assembly?[]? assemblies) Parameters app HostApplicationBuilder The app builder args string[] The command line arguments assemblies Assembly[] The assemblies to look in for modules Returns IHost The resulting host"
  },
  "api/Gestalt.Console.ExtensionMethods.html": {
    "href": "api/Gestalt.Console.ExtensionMethods.html",
    "title": "Namespace Gestalt.Console.ExtensionMethods | Gestalt API Reference",
    "keywords": "Namespace Gestalt.Console.ExtensionMethods Classes HostApplicationBuilderExtensions Host application builder extensions"
  },
  "api/Gestalt.Console.InternalHostedService.html": {
    "href": "api/Gestalt.Console.InternalHostedService.html",
    "title": "Class InternalHostedService | Gestalt API Reference",
    "keywords": "Class InternalHostedService Namespace Gestalt.Console Assembly Gestalt.Console.dll Internal hosted service for the console application. public class InternalHostedService : IHostedService Inheritance object InternalHostedService Implements IHostedService Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods GenericExtensions.When<TObject>(TObject?, bool, Func<TObject?, TObject?>?) Constructors InternalHostedService(IApplication?) Initializes a new instance of the InternalHostedService class. public InternalHostedService(IApplication? application) Parameters application IApplication Application object Methods StartAsync(CancellationToken) Starts the application. public Task StartAsync(CancellationToken cancellationToken) Parameters cancellationToken CancellationToken Cancellation token. Returns Task Async task. StopAsync(CancellationToken) Stops the application. public Task StopAsync(CancellationToken cancellationToken) Parameters cancellationToken CancellationToken Cancellation token. Returns Task Async task."
  },
  "api/Gestalt.Console.Modules.InternalModule.html": {
    "href": "api/Gestalt.Console.Modules.InternalModule.html",
    "title": "Class InternalModule | Gestalt API Reference",
    "keywords": "Class InternalModule Namespace Gestalt.Console.Modules Assembly Gestalt.Console.dll Internal module public class InternalModule : ApplicationModuleBaseClass<InternalModule>, IEquatable<InternalModule>, IApplicationModule Inheritance object ApplicationModuleBaseClass<InternalModule> InternalModule Implements IEquatable<InternalModule> IApplicationModule Inherited Members ApplicationModuleBaseClass<InternalModule>.Category ApplicationModuleBaseClass<InternalModule>.ContentPath ApplicationModuleBaseClass<InternalModule>.ID ApplicationModuleBaseClass<InternalModule>.LastModified ApplicationModuleBaseClass<InternalModule>.Name ApplicationModuleBaseClass<InternalModule>.Order ApplicationModuleBaseClass<InternalModule>.Tags ApplicationModuleBaseClass<InternalModule>.Version ApplicationModuleBaseClass<InternalModule>.ConfigureConfigurationSettings(IConfigurationBuilder, IHostEnvironment, string[]) ApplicationModuleBaseClass<InternalModule>.ConfigureHostSettings(IHostBuilder, IConfiguration, IHostEnvironment) ApplicationModuleBaseClass<InternalModule>.ConfigureLoggingSettings(ILoggingBuilder, IConfiguration, IHostEnvironment) ApplicationModuleBaseClass<InternalModule>.ConfigureMetrics(IMetricsBuilder, IConfiguration, IHostEnvironment) ApplicationModuleBaseClass<InternalModule>.Equals(object) ApplicationModuleBaseClass<InternalModule>.Equals(InternalModule) ApplicationModuleBaseClass<InternalModule>.GetHashCode() ApplicationModuleBaseClass<InternalModule>.OnStarted() ApplicationModuleBaseClass<InternalModule>.OnStopped() ApplicationModuleBaseClass<InternalModule>.OnStopping() object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods GenericExtensions.When<TObject>(TObject?, bool, Func<TObject?, TObject?>?) Methods ConfigureServices(IServiceCollection?, IConfiguration?, IHostEnvironment?) Used to add the internal hosted service to the application. public override IServiceCollection? ConfigureServices(IServiceCollection? services, IConfiguration? configuration, IHostEnvironment? environment) Parameters services IServiceCollection The service collection configuration IConfiguration Configuration environment IHostEnvironment Host environment Returns IServiceCollection The service collection See Also ApplicationModuleBaseClass<TModule>"
  },
  "api/Gestalt.Console.Modules.html": {
    "href": "api/Gestalt.Console.Modules.html",
    "title": "Namespace Gestalt.Console.Modules | Gestalt API Reference",
    "keywords": "Namespace Gestalt.Console.Modules Classes InternalModule Internal module"
  },
  "api/Gestalt.Console.html": {
    "href": "api/Gestalt.Console.html",
    "title": "Namespace Gestalt.Console | Gestalt API Reference",
    "keywords": "Namespace Gestalt.Console Classes ConsoleApplication Console application class InternalHostedService Internal hosted service for the console application."
  },
  "api/Gestalt.Core.ApplicationFrameworkDefaults.Order.html": {
    "href": "api/Gestalt.Core.ApplicationFrameworkDefaults.Order.html",
    "title": "Class ApplicationFrameworkDefaults.Order | Gestalt API Reference",
    "keywords": "Class ApplicationFrameworkDefaults.Order Namespace Gestalt.Core Assembly Gestalt.Core.dll The order the frameworks are loaded. public static class ApplicationFrameworkDefaults.Order Inheritance object ApplicationFrameworkDefaults.Order Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields Default The default order. public const int Default = 100 Field Value int"
  },
  "api/Gestalt.Core.ApplicationFrameworkDefaults.html": {
    "href": "api/Gestalt.Core.ApplicationFrameworkDefaults.html",
    "title": "Class ApplicationFrameworkDefaults | Gestalt API Reference",
    "keywords": "Class ApplicationFrameworkDefaults Namespace Gestalt.Core Assembly Gestalt.Core.dll Application framework defaults public static class ApplicationFrameworkDefaults Inheritance object ApplicationFrameworkDefaults Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString()"
  },
  "api/Gestalt.Core.ApplicationModuleDefaults.Order.html": {
    "href": "api/Gestalt.Core.ApplicationModuleDefaults.Order.html",
    "title": "Class ApplicationModuleDefaults.Order | Gestalt API Reference",
    "keywords": "Class ApplicationModuleDefaults.Order Namespace Gestalt.Core Assembly Gestalt.Core.dll The order the modules are loaded. public static class ApplicationModuleDefaults.Order Inheritance object ApplicationModuleDefaults.Order Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields Default The default order. public const int Default = 100 Field Value int"
  },
  "api/Gestalt.Core.ApplicationModuleDefaults.html": {
    "href": "api/Gestalt.Core.ApplicationModuleDefaults.html",
    "title": "Class ApplicationModuleDefaults | Gestalt API Reference",
    "keywords": "Class ApplicationModuleDefaults Namespace Gestalt.Core Assembly Gestalt.Core.dll Application Module Defaults public static class ApplicationModuleDefaults Inheritance object ApplicationModuleDefaults Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString()"
  },
  "api/Gestalt.Core.BaseClasses.ApplicationBaseClass.html": {
    "href": "api/Gestalt.Core.BaseClasses.ApplicationBaseClass.html",
    "title": "Class ApplicationBaseClass | Gestalt API Reference",
    "keywords": "Class ApplicationBaseClass Namespace Gestalt.Core.BaseClasses Assembly Gestalt.Core.dll Application info holder. public abstract class ApplicationBaseClass : IApplication Inheritance object ApplicationBaseClass Implements IApplication Derived AspNetApplication ConsoleApplication Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods GenericExtensions.When<TObject>(TObject?, bool, Func<TObject?, TObject?>?) Constructors ApplicationBaseClass(IConfiguration?, IHostEnvironment?, params Assembly?[]?) Initializes a new instance of the ApplicationBaseClass class. protected ApplicationBaseClass(IConfiguration? configuration, IHostEnvironment? env, params Assembly?[]? assemblies) Parameters configuration IConfiguration The configuration. env IHostEnvironment The host environment assemblies Assembly[] The assemblies to search for modules, if empty the base application directory is searched. Properties Configuration Gets the configuration. protected IConfiguration? Configuration { get; } Property Value IConfiguration The configuration. Environment Gets the environment. protected IHostEnvironment? Environment { get; } Property Value IHostEnvironment The environment. Frameworks Gets the frameworks. protected IApplicationFramework[] Frameworks { get; } Property Value IApplicationFramework[] The frameworks. InternalLogger Gets the internal logger. protected ILogger? InternalLogger { get; } Property Value ILogger Modules Gets the modules. protected IApplicationModule[] Modules { get; } Property Value IApplicationModule[] The modules. Name Gets the name. public string Name { get; } Property Value string The name. Methods ConfigureConfigurationSettings(IConfigurationBuilder?, string?[]?) Configures the configuration settings. public IConfigurationBuilder? ConfigureConfigurationSettings(IConfigurationBuilder? configuration, string?[]? args) Parameters configuration IConfigurationBuilder The configuration. args string[] The command line arguments Returns IConfigurationBuilder The configuration builder. ConfigureFrameworks(IServiceCollection?) Configures the framework specific services. public IServiceCollection? ConfigureFrameworks(IServiceCollection? services) Parameters services IServiceCollection The services. Returns IServiceCollection The services. ConfigureHostSettings(IHostBuilder?) Configures the host settings. public IHostBuilder? ConfigureHostSettings(IHostBuilder? host) Parameters host IHostBuilder The host. Returns IHostBuilder Host builder ConfigureLoggingSettings(ILoggingBuilder?) Configures the logging settings. public ILoggingBuilder? ConfigureLoggingSettings(ILoggingBuilder? logging) Parameters logging ILoggingBuilder The logging. Returns ILoggingBuilder Logging builder ConfigureServices(IServiceCollection?) Configures the services for MVC. public IServiceCollection? ConfigureServices(IServiceCollection? services) Parameters services IServiceCollection The services collection. Returns IServiceCollection The service collection OnStarted() Called when [started]. public void OnStarted() OnStopped() Called when [stopped]. public void OnStopped() OnStopping() Called when [shutdown]. public void OnStopping() See Also IApplication"
  },
  "api/Gestalt.Core.BaseClasses.ApplicationFrameworkBaseClass-2.html": {
    "href": "api/Gestalt.Core.BaseClasses.ApplicationFrameworkBaseClass-2.html",
    "title": "Class ApplicationFrameworkBaseClass<TApplicationFramework, TModule> | Gestalt API Reference",
    "keywords": "Class ApplicationFrameworkBaseClass<TApplicationFramework, TModule> Namespace Gestalt.Core.BaseClasses Assembly Gestalt.Core.dll Application framework base class public abstract class ApplicationFrameworkBaseClass<TApplicationFramework, TModule> : IEquatable<IApplicationFramework>, IApplicationFramework where TApplicationFramework : ApplicationFrameworkBaseClass<TApplicationFramework, TModule>, new() where TModule : IApplicationModule Type Parameters TApplicationFramework Application framework base class TModule Application framework base class Inheritance object ApplicationFrameworkBaseClass<TApplicationFramework, TModule> Implements IEquatable<IApplicationFramework> IApplicationFramework Derived ControllerFramework MvcFramework RazorPagesFramework SignalRFramework Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods GenericExtensions.When<TObject>(TObject?, bool, Func<TObject?, TObject?>?) Constructors ApplicationFrameworkBaseClass() Initializes a new instance of the ApplicationFrameworkBaseClass<TApplicationFramework, TModule> class. protected ApplicationFrameworkBaseClass() ApplicationFrameworkBaseClass(string?) Initializes a new instance of the ApplicationFrameworkBaseClass<TApplicationFramework, TModule> class. protected ApplicationFrameworkBaseClass(string? name) Parameters name string The name of the application framework. Properties ID Gets the identifier. public string ID { get; protected set; } Property Value string The identifier. LastModified Gets the last modified. public DateTime LastModified { get; } Property Value DateTime The last modified. Name Application framework name public string Name { get; protected set; } Property Value string The name. Order Gets the order. public virtual int Order { get; protected set; } Property Value int The order. Version Gets the version. public string Version { get; } Property Value string The version. Methods Configure(IApplicationModule?[]?, IServiceCollection?, IConfiguration?, IHostEnvironment?) Calls the appropriate methods on the modules to configure the application. public IServiceCollection? Configure(IApplicationModule?[]? modules, IServiceCollection? services, IConfiguration? configuration, IHostEnvironment? environment) Parameters modules IApplicationModule[] The modules. services IServiceCollection The services. configuration IConfiguration The application configuration. environment IHostEnvironment The host environment. Returns IServiceCollection The modules. ConfigureModules(TModule[], IServiceCollection?, IConfiguration?, IHostEnvironment?) Calls the appropriate methods on the modules to configure the application. protected abstract void ConfigureModules(TModule[] modules, IServiceCollection? services, IConfiguration? configuration, IHostEnvironment? environment) Parameters modules TModule[] The modules. services IServiceCollection The services. configuration IConfiguration The application configuration. environment IHostEnvironment The host environment. Equals(IApplicationFramework?) Determines whether the specified IApplicationFramework, is equal to this instance. public bool Equals(IApplicationFramework? other) Parameters other IApplicationFramework The other object. Returns bool True if they are equal, false otherwise. Equals(object?) Determines whether the specified object, is equal to this instance. public override bool Equals(object? obj) Parameters obj object The object to compare with this instance. Returns bool true if the specified object is equal to this instance; otherwise, false. GetHashCode() Returns a hash code for this instance. public override int GetHashCode() Returns int A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. Operators operator ==(ApplicationFrameworkBaseClass<TApplicationFramework, TModule>?, ApplicationFrameworkBaseClass<TApplicationFramework, TModule>?) Implements the operator ==. public static bool operator ==(ApplicationFrameworkBaseClass<TApplicationFramework, TModule>? class1, ApplicationFrameworkBaseClass<TApplicationFramework, TModule>? class2) Parameters class1 ApplicationFrameworkBaseClass<TApplicationFramework, TModule> The class1. class2 ApplicationFrameworkBaseClass<TApplicationFramework, TModule> The class2. Returns bool The result of the operator. operator ==(ApplicationFrameworkBaseClass<TApplicationFramework, TModule>?, IApplicationFramework?) Implements the operator ==. public static bool operator ==(ApplicationFrameworkBaseClass<TApplicationFramework, TModule>? class1, IApplicationFramework? class2) Parameters class1 ApplicationFrameworkBaseClass<TApplicationFramework, TModule> The class1. class2 IApplicationFramework The class2. Returns bool The result of the operator. operator ==(IApplicationFramework?, ApplicationFrameworkBaseClass<TApplicationFramework, TModule>?) Implements the operator ==. public static bool operator ==(IApplicationFramework? class1, ApplicationFrameworkBaseClass<TApplicationFramework, TModule>? class2) Parameters class1 IApplicationFramework The class1. class2 ApplicationFrameworkBaseClass<TApplicationFramework, TModule> The class2. Returns bool The result of the operator. operator !=(ApplicationFrameworkBaseClass<TApplicationFramework, TModule>?, ApplicationFrameworkBaseClass<TApplicationFramework, TModule>?) Implements the operator !=. public static bool operator !=(ApplicationFrameworkBaseClass<TApplicationFramework, TModule>? class1, ApplicationFrameworkBaseClass<TApplicationFramework, TModule>? class2) Parameters class1 ApplicationFrameworkBaseClass<TApplicationFramework, TModule> The class1. class2 ApplicationFrameworkBaseClass<TApplicationFramework, TModule> The class2. Returns bool The result of the operator. operator !=(ApplicationFrameworkBaseClass<TApplicationFramework, TModule>?, IApplicationFramework?) Implements the operator !=. public static bool operator !=(ApplicationFrameworkBaseClass<TApplicationFramework, TModule>? class1, IApplicationFramework? class2) Parameters class1 ApplicationFrameworkBaseClass<TApplicationFramework, TModule> The class1. class2 IApplicationFramework The class2. Returns bool The result of the operator. operator !=(IApplicationFramework?, ApplicationFrameworkBaseClass<TApplicationFramework, TModule>?) Implements the operator !=. public static bool operator !=(IApplicationFramework? class1, ApplicationFrameworkBaseClass<TApplicationFramework, TModule>? class2) Parameters class1 IApplicationFramework The class1. class2 ApplicationFrameworkBaseClass<TApplicationFramework, TModule> The class2. Returns bool The result of the operator. See Also IApplicationFramework"
  },
  "api/Gestalt.Core.BaseClasses.ApplicationModuleBaseClass-1.html": {
    "href": "api/Gestalt.Core.BaseClasses.ApplicationModuleBaseClass-1.html",
    "title": "Class ApplicationModuleBaseClass<TModule> | Gestalt API Reference",
    "keywords": "Class ApplicationModuleBaseClass<TModule> Namespace Gestalt.Core.BaseClasses Assembly Gestalt.Core.dll Module base class public abstract class ApplicationModuleBaseClass<TModule> : IEquatable<TModule>, IApplicationModule where TModule : ApplicationModuleBaseClass<TModule>, new() Type Parameters TModule The type of the module. Inheritance object ApplicationModuleBaseClass<TModule> Implements IEquatable<TModule> IApplicationModule Derived AspNetModuleBaseClass<TModule> InternalModule Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods GenericExtensions.When<TObject>(TObject?, bool, Func<TObject?, TObject?>?) Constructors ApplicationModuleBaseClass() Initializes a new instance of the ApplicationModuleBaseClass<TModule> class. protected ApplicationModuleBaseClass() ApplicationModuleBaseClass(string?, string?, string?, params string?[]?) Initializes a new instance of the ApplicationModuleBaseClass<TModule> class. protected ApplicationModuleBaseClass(string? name, string? category, string? contentPath, params string?[]? tags) Parameters name string The name of the module. category string The category for the module. contentPath string The content path for the module. tags string[] The tags associated with the module. Properties Category Gets the type. public string Category { get; protected set; } Property Value string The type. ContentPath The content path public string ContentPath { get; protected set; } Property Value string The content path. ID Gets the identifier. public string ID { get; protected set; } Property Value string The identifier. LastModified Gets the last modified. public DateTime LastModified { get; } Property Value DateTime The last modified. Name Gets the name. public string Name { get; protected set; } Property Value string The name. Order Gets the order that they are initialized in. public virtual int Order { get; protected set; } Property Value int The order that they are initialized in. Tags Gets the tags. public string?[] Tags { get; protected set; } Property Value string[] The tags. Version Gets the version. public string Version { get; } Property Value string The version. Methods ConfigureConfigurationSettings(IConfigurationBuilder?, IHostEnvironment?, string?[]?) Configure the configuration settings. public virtual IConfigurationBuilder? ConfigureConfigurationSettings(IConfigurationBuilder? configuration, IHostEnvironment? environment, string?[]? args) Parameters configuration IConfigurationBuilder Configuration builder environment IHostEnvironment The host environment args string[] The command line arguments Returns IConfigurationBuilder The configuration builder ConfigureHostSettings(IHostBuilder?, IConfiguration?, IHostEnvironment?) Configures the host settings. public virtual IHostBuilder? ConfigureHostSettings(IHostBuilder? host, IConfiguration? configuration, IHostEnvironment? environment) Parameters host IHostBuilder The host. configuration IConfiguration The configuration. environment IHostEnvironment The environment. Returns IHostBuilder Host builder ConfigureLoggingSettings(ILoggingBuilder?, IConfiguration?, IHostEnvironment?) Configures the logging settings. public virtual ILoggingBuilder? ConfigureLoggingSettings(ILoggingBuilder? logging, IConfiguration? configuration, IHostEnvironment? environment) Parameters logging ILoggingBuilder The logging. configuration IConfiguration The configuration. environment IHostEnvironment The environment. Returns ILoggingBuilder Logging builder ConfigureMetrics(IMetricsBuilder?, IConfiguration?, IHostEnvironment?) Configures the metrics. public virtual IMetricsBuilder? ConfigureMetrics(IMetricsBuilder? metrics, IConfiguration? configuration, IHostEnvironment? environment) Parameters metrics IMetricsBuilder The metrics builder. configuration IConfiguration The configuration. environment IHostEnvironment The environment. Returns IMetricsBuilder The metrics builder ConfigureServices(IServiceCollection?, IConfiguration?, IHostEnvironment?) Configures the services for the module. public virtual IServiceCollection? ConfigureServices(IServiceCollection? services, IConfiguration? configuration, IHostEnvironment? environment) Parameters services IServiceCollection The services collection. configuration IConfiguration The configuration. environment IHostEnvironment The environment. Returns IServiceCollection Services Equals(object?) Determines whether the specified object, is equal to this instance. public override bool Equals(object? obj) Parameters obj object The object to compare with this instance. Returns bool true if the specified object is equal to this instance; otherwise, false. Equals(TModule?) Indicates whether the current object is equal to another object of the same type. public bool Equals(TModule? other) Parameters other TModule An object to compare with this object. Returns bool true if the current object is equal to the other parameter; otherwise, false. GetHashCode() Returns a hash code for this instance. public override int GetHashCode() Returns int A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. OnStarted() Called when the application is [started]. public virtual void OnStarted() OnStopped() Called when the application is [stopped]. public virtual void OnStopped() OnStopping() Called when the application is [stopping]. public virtual void OnStopping() Operators operator ==(ApplicationModuleBaseClass<TModule>?, ApplicationModuleBaseClass<TModule>?) Implements the operator ==. public static bool operator ==(ApplicationModuleBaseClass<TModule>? class1, ApplicationModuleBaseClass<TModule>? class2) Parameters class1 ApplicationModuleBaseClass<TModule> The class1. class2 ApplicationModuleBaseClass<TModule> The class2. Returns bool The result of the operator. operator !=(ApplicationModuleBaseClass<TModule>?, ApplicationModuleBaseClass<TModule>?) Implements the operator !=. public static bool operator !=(ApplicationModuleBaseClass<TModule>? class1, ApplicationModuleBaseClass<TModule>? class2) Parameters class1 ApplicationModuleBaseClass<TModule> The class1. class2 ApplicationModuleBaseClass<TModule> The class2. Returns bool The result of the operator. See Also IApplicationModule IEquatable<T> IEquatable<T> IApplicationModule"
  },
  "api/Gestalt.Core.BaseClasses.html": {
    "href": "api/Gestalt.Core.BaseClasses.html",
    "title": "Namespace Gestalt.Core.BaseClasses | Gestalt API Reference",
    "keywords": "Namespace Gestalt.Core.BaseClasses Classes ApplicationBaseClass Application info holder. ApplicationFrameworkBaseClass<TApplicationFramework, TModule> Application framework base class ApplicationModuleBaseClass<TModule> Module base class"
  },
  "api/Gestalt.Core.ExtensionMethods.AssemblyExtensions.html": {
    "href": "api/Gestalt.Core.ExtensionMethods.AssemblyExtensions.html",
    "title": "Class AssemblyExtensions | Gestalt API Reference",
    "keywords": "Class AssemblyExtensions Namespace Gestalt.Core.ExtensionMethods Assembly Gestalt.Core.dll Assembly Extension Methods public static class AssemblyExtensions Inheritance object AssemblyExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods FindAssemblies(Assembly?) Finds the assemblies in the application directory. public static Assembly[] FindAssemblies(this Assembly? entryAssembly) Parameters entryAssembly Assembly The entry assembly. Returns Assembly[] The list of assemblies in the same directory as the entry assembly. FindFrameworks(Assembly?[]?) Finds the frameworks in a list of assemblies. public static IApplicationFramework[] FindFrameworks(this Assembly?[]? assemblies) Parameters assemblies Assembly[] The assemblies to search. Returns IApplicationFramework[] The application frameworks. FindModules(Assembly?[]?) Finds the modules in a list of assemblies. public static IApplicationModule[] FindModules(this Assembly?[]? assemblies) Parameters assemblies Assembly[] Returns IApplicationModule[] The application modules."
  },
  "api/Gestalt.Core.ExtensionMethods.GenericExtensions.html": {
    "href": "api/Gestalt.Core.ExtensionMethods.GenericExtensions.html",
    "title": "Class GenericExtensions | Gestalt API Reference",
    "keywords": "Class GenericExtensions Namespace Gestalt.Core.ExtensionMethods Assembly Gestalt.Core.dll Generic Extensions public static class GenericExtensions Inheritance object GenericExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods When<TObject>(TObject?, bool, Func<TObject?, TObject?>?) When the predicate is true, run the method. public static TObject? When<TObject>(this TObject? obj, bool predicate, Func<TObject?, TObject?>? method) Parameters obj TObject The object. predicate bool if set to true run the method. method Func<TObject, TObject> The method to run if true. Returns TObject The object. Type Parameters TObject The type of the object."
  },
  "api/Gestalt.Core.ExtensionMethods.html": {
    "href": "api/Gestalt.Core.ExtensionMethods.html",
    "title": "Namespace Gestalt.Core.ExtensionMethods | Gestalt API Reference",
    "keywords": "Namespace Gestalt.Core.ExtensionMethods Classes AssemblyExtensions Assembly Extension Methods GenericExtensions Generic Extensions"
  },
  "api/Gestalt.Core.Interfaces.IApplication.html": {
    "href": "api/Gestalt.Core.Interfaces.IApplication.html",
    "title": "Interface IApplication | Gestalt API Reference",
    "keywords": "Interface IApplication Namespace Gestalt.Core.Interfaces Assembly Gestalt.Core.dll Application Interface public interface IApplication Extension Methods GenericExtensions.When<TObject>(TObject?, bool, Func<TObject?, TObject?>?) Methods OnStarted() Called when [started]. void OnStarted() OnStopped() Called when [stopped]. void OnStopped() OnStopping() Called when [stopping]. void OnStopping()"
  },
  "api/Gestalt.Core.Interfaces.IApplicationFramework.html": {
    "href": "api/Gestalt.Core.Interfaces.IApplicationFramework.html",
    "title": "Interface IApplicationFramework | Gestalt API Reference",
    "keywords": "Interface IApplicationFramework Namespace Gestalt.Core.Interfaces Assembly Gestalt.Core.dll The application framework interface. This is used to configure the framework specific modules. public interface IApplicationFramework Extension Methods GenericExtensions.When<TObject>(TObject?, bool, Func<TObject?, TObject?>?) Properties ID Gets the identifier. string ID { get; } Property Value string The identifier. LastModified Gets the last modified. DateTime LastModified { get; } Property Value DateTime The last modified. Name Application framework name string Name { get; } Property Value string The name. Order Gets the order. int Order { get; } Property Value int The order. Version Gets the version. string Version { get; } Property Value string The version. Methods Configure(IApplicationModule[], IServiceCollection?, IConfiguration?, IHostEnvironment?) Calls the appropriate methods on the modules to configure the application. IServiceCollection? Configure(IApplicationModule[] modules, IServiceCollection? services, IConfiguration? configuration, IHostEnvironment? environment) Parameters modules IApplicationModule[] The modules. services IServiceCollection The service collection. configuration IConfiguration The application configuration. environment IHostEnvironment The host environment. Returns IServiceCollection The services."
  },
  "api/Gestalt.Core.Interfaces.IApplicationModule.html": {
    "href": "api/Gestalt.Core.Interfaces.IApplicationModule.html",
    "title": "Interface IApplicationModule | Gestalt API Reference",
    "keywords": "Interface IApplicationModule Namespace Gestalt.Core.Interfaces Assembly Gestalt.Core.dll Application Module Interface public interface IApplicationModule Extension Methods GenericExtensions.When<TObject>(TObject?, bool, Func<TObject?, TObject?>?) Properties Category Gets the type. string Category { get; } Property Value string The type. ContentPath The content path string ContentPath { get; } Property Value string The content path. ID Gets the identifier. string ID { get; } Property Value string The identifier. LastModified Gets the last modified. DateTime LastModified { get; } Property Value DateTime The last modified. Name Gets the name. string Name { get; } Property Value string The name. Order Gets the order. int Order { get; } Property Value int The order. Tags Gets the tags. string?[] Tags { get; } Property Value string[] The tags. Version Gets the version. string Version { get; } Property Value string The version. Methods ConfigureConfigurationSettings(IConfigurationBuilder?, IHostEnvironment?, string?[]?) Used to configure configuration settings. IConfigurationBuilder? ConfigureConfigurationSettings(IConfigurationBuilder? configuration, IHostEnvironment? environment, string?[]? args) Parameters configuration IConfigurationBuilder Configuration builder environment IHostEnvironment The host environment args string[] The command line arguments Returns IConfigurationBuilder The configuration builder. ConfigureHostSettings(IHostBuilder?, IConfiguration?, IHostEnvironment?) Configures the host settings. IHostBuilder? ConfigureHostSettings(IHostBuilder? host, IConfiguration? configuration, IHostEnvironment? environment) Parameters host IHostBuilder The host. configuration IConfiguration The configuration. environment IHostEnvironment The environment. Returns IHostBuilder Host builder ConfigureLoggingSettings(ILoggingBuilder?, IConfiguration?, IHostEnvironment?) Configures the logging settings. ILoggingBuilder? ConfigureLoggingSettings(ILoggingBuilder? logging, IConfiguration? configuration, IHostEnvironment? environment) Parameters logging ILoggingBuilder The logging. configuration IConfiguration The configuration. environment IHostEnvironment The environment. Returns ILoggingBuilder Logging builder ConfigureMetrics(IMetricsBuilder?, IConfiguration?, IHostEnvironment?) Configures the metrics. IMetricsBuilder? ConfigureMetrics(IMetricsBuilder? metrics, IConfiguration? configuration, IHostEnvironment? environment) Parameters metrics IMetricsBuilder The metrics builder. configuration IConfiguration The configuration. environment IHostEnvironment The environment. Returns IMetricsBuilder The metrics builder ConfigureServices(IServiceCollection?, IConfiguration?, IHostEnvironment?) Configures the services for the module. IServiceCollection? ConfigureServices(IServiceCollection? services, IConfiguration? configuration, IHostEnvironment? environment) Parameters services IServiceCollection The services collection. configuration IConfiguration The configuration. environment IHostEnvironment The environment. Returns IServiceCollection Services OnStarted() Called when the application is [started]. void OnStarted() OnStopped() Called when the application is [stopped]. void OnStopped() OnStopping() Called when the application is [stopping]. void OnStopping()"
  },
  "api/Gestalt.Core.Interfaces.html": {
    "href": "api/Gestalt.Core.Interfaces.html",
    "title": "Namespace Gestalt.Core.Interfaces | Gestalt API Reference",
    "keywords": "Namespace Gestalt.Core.Interfaces Interfaces IApplication Application Interface IApplicationFramework The application framework interface. This is used to configure the framework specific modules. IApplicationModule Application Module Interface"
  },
  "api/Gestalt.Core.html": {
    "href": "api/Gestalt.Core.html",
    "title": "Namespace Gestalt.Core | Gestalt API Reference",
    "keywords": "Namespace Gestalt.Core Classes ApplicationFrameworkDefaults Application framework defaults ApplicationFrameworkDefaults.Order The order the frameworks are loaded. ApplicationModuleDefaults Application Module Defaults ApplicationModuleDefaults.Order The order the modules are loaded."
  },
  "api/index.html": {
    "href": "api/index.html",
    "title": "Welcome | Gestalt API Reference",
    "keywords": "Welcome Welcome to the API browser."
  },
  "articles/console.html": {
    "href": "articles/console.html",
    "title": "Code | Gestalt API Reference",
    "keywords": "Code using Gestalt.Console.ExtensionMethods; using Gestalt.Core.BaseClasses; using Microsoft.Extensions.Configuration; using Microsoft.Extensions.DependencyInjection; using Microsoft.Extensions.Hosting; namespace Gestalt.Example.Console { /// <summary> /// Example service interface. /// </summary> public interface IExampleService { /// <summary> /// Runs this instance of the service. /// </summary> void Run(); } /// <summary> /// This is the host service that will be started when the application starts. It will start all /// of the services that implement the IExampleService interface. /// </summary> public class ExampleHostService : IHostedService { /// <summary> /// Initializes a new instance of the <see cref=\"ExampleHostService\"/> class. This class /// takes in a collection of services that implement the IExampleService interface. /// </summary> /// <param name=\"services\">The example services</param> public ExampleHostService(IEnumerable<IExampleService> services) { Services = services; } /// <summary> /// Gets the services that implement the IExampleService interface. /// </summary> public IEnumerable<IExampleService> Services { get; } /// <summary> /// Starts the services. /// </summary> /// <param name=\"cancellationToken\">Cancellation token.</param> /// <returns>A task.</returns> public Task StartAsync(CancellationToken cancellationToken) { System.Console.WriteLine(\"Starting services\"); foreach (IExampleService Service in Services) { Service.Run(); } return Task.CompletedTask; } /// <summary> /// Stops the services. /// </summary> /// <param name=\"cancellationToken\">Cancellation token.</param> /// <returns>A task.</returns> public Task StopAsync(CancellationToken cancellationToken) { System.Console.WriteLine(\"Stopping services\"); return Task.CompletedTask; } } /// <summary> /// Example module class. With modules you can either inherit from the /// ApplicationModuleBaseClass or implement the IApplicationModule interface. In the base class, /// there are default methods for configuration, services, lifecycle events, etc. that can be /// overridden. In this example, we are using the base class. /// </summary> public class ExampleModule : ApplicationModuleBaseClass<ExampleModule> { /// <summary> /// This method is called when setting up the configuration settings. /// </summary> /// <param name=\"configuration\"> /// The configuration builder that you can use to set up the configuration settings. /// </param> /// <param name=\"environment\">The host environment.</param> /// <param name=\"args\"> /// The command line arguments that are passed in from the UseGestalt extension method. /// </param> /// <returns>The configuration builder.</returns> public override IConfigurationBuilder? ConfigureConfigurationSettings(IConfigurationBuilder? configuration, IHostEnvironment? environment, string?[]? args) => configuration?.AddCommandLine(args!); /// <summary> /// This method is called when setting up the services needed for the module. This is where /// you would add your services to the service collection. /// </summary> /// <param name=\"services\">The service collection that you can use to add your services.</param> /// <param name=\"configuration\">The configuration information.</param> /// <param name=\"environment\">The host environment.</param> /// <returns>The service collection.</returns> public override IServiceCollection? ConfigureServices(IServiceCollection? services, IConfiguration? configuration, IHostEnvironment? environment) { // Add all services that implement the IExampleService interface to the service // collection as transient services. We could also add them one by one using the // AddTransient method. return services?.AddAllTransient<IExampleService>() ?.AddHostedService<ExampleHostService>(); } /// <summary> /// This method is called when the application is started. /// </summary> public override void OnStarted() => System.Console.WriteLine(\"Application has started.\"); /// <summary> /// This method is called when the application is stopped. /// </summary> public override void OnStopped() => System.Console.WriteLine(\"Application has stopped.\"); /// <summary> /// This method is called when the application is stopping (not used in console applications). /// </summary> public override void OnStopping() => System.Console.WriteLine(\"Application is stopping.\"); } /// <summary> /// This is an example service that we will add to the service collection. /// </summary> public class ExampleService1 : IExampleService { /// <summary> /// Runs this instance of the service. /// </summary> public void Run() => System.Console.WriteLine(\"Hello from ExampleService1!\"); } /// <summary> /// This is another example service that we will add to the service collection. /// </summary> public class ExampleService2 : IExampleService { /// <summary> /// Runs this instance of the service. /// </summary> public void Run() => System.Console.WriteLine(\"Hello from ExampleService2!\"); } /// <summary> /// The main program class. This example shows how to use the Gestalt framework in a console application. /// </summary> internal static class Program { /// <summary> /// The main entry point for the application. /// </summary> /// <param name=\"args\">The command line arguments.</param> private static void Main(string[] args) { IHost? HostApp = Host.CreateApplicationBuilder().UseGestalt(args); HostApp?.Run(); } } } Output Starting services Hello from ExampleService1! Hello from ExampleService2! Application has started. Application has stopped. Stopping services"
  },
  "articles/intro.html": {
    "href": "articles/intro.html",
    "title": "Code | Gestalt API Reference",
    "keywords": "Code using Gestalt.ASPNet.ExtensionMethods; using Gestalt.ASPNet.MVC.BaseClasses; using Gestalt.ASPNet.MVC.Interfaces; using Gestalt.ASPNet.RazorPages.BaseClasses; using Gestalt.ASPNet.RazorPages.Interfaces; using Gestalt.ASPNet.SignalR.Interfaces; using Microsoft.AspNetCore.Mvc; using Microsoft.AspNetCore.Mvc.RazorPages; using Microsoft.AspNetCore.SignalR; using Microsoft.Extensions.Diagnostics.Metrics; namespace Gestalt.Example { /// <summary> /// In this example, we are creating a basic web application using Gestalt. We are using the default configuration settings and showing examples of building your own modules. /// </summary> public static class Program { /// <summary> /// The main entry point for the application. This is where the application is configured and run. /// </summary> /// <param name=\"args\">The command line arguments</param> public static void Main(string[] args) { // Create a new web application builder as normal. WebApplicationBuilder Builder = WebApplication.CreateBuilder(args); // Call the UseGestalt extension method and the Gestalt library will find your modules, use them to configure your application, and build your WebApplication object. // In this example, we have added the Gestalt.ASPNet.MVC, Gestalt.ASPNet.SignalR, and Gestalt.ASPNet.RazorPages libraries to the project. // As such, the UseGestalt extesion will automatically add routing, call AddControllersWithViews, AddRazorPages, and AddSignalR for us. // It will then allow the modules to configure the parts of the application that they are responsible for. WebApplication? App = Builder.UseGestalt(args); // If the application is null, then the Gestalt library was unable to build the application. // Normally an exception would be thrown but if the WebApplicationBuilder is null, then a null WebApplication object is returned. if (App is null) return; // Note that you can still configure the application as normal. // Gestalt is meant to help you build your application in a modular way but you can still configure it as you see fit. // This also applies above to the WebApplicationBuilder. You can always configure it as you see fit prior to calling UseGestalt. App.Map(\"/Custom\", app => { app.UseRouting(); app.UseEndpoints(endpoints => { endpoints.MapGet(\"/\", async context => await context.Response.WriteAsync(\"Hello World!\")); }); }); // Run the application as normal. App.Run(); } } /// <summary> /// This is an example of a basic module that configures the application with the usual default settings when creating a new web application. /// It implements the MvcModuleBaseClass which simplifies the process of creating a module that needs to modify MVC settings. /// However, you can implement the IMvcModule interface directly if you prefer. /// </summary> public class BasicModule : MvcModuleBaseClass<BasicModule> { /// <summary> /// This is called to configure the IApplicationBuilder object. Since this is an MVC app, that would be the WebApplication object. /// </summary> /// <param name=\"applicationBuilder\">The application builder object.</param> /// <param name=\"configuration\">The configuration object.</param> /// <param name=\"environment\">The host environment object.</param> /// <returns>The application builder object should be returned.</returns> public override IApplicationBuilder? ConfigureApplication(IApplicationBuilder? applicationBuilder, IConfiguration? configuration, IHostEnvironment? environment) { if (applicationBuilder is null) return applicationBuilder; // Configure the HTTP request pipeline. if (environment?.IsDevelopment() == false) { // This is the default exception handler for the application when in production. _ = applicationBuilder.UseExceptionHandler(\"/Home/Error\"); // We will add a strict transport security header to the response. _ = applicationBuilder.UseHsts(); } // This will redirect HTTP requests to HTTPS. _ = applicationBuilder.UseHttpsRedirection(); // And let's serve static files. _ = applicationBuilder.UseStaticFiles(); // We will also add authorization to the application. _ = applicationBuilder.UseAuthorization(); // And lastly, we will return the application builder. return applicationBuilder; } /// <summary> /// This is called to configure the MVC options. We will just return the options object as is. /// </summary> /// <param name=\"mVCBuilder\">The MVC builder object.</param> /// <param name=\"configuration\">The configuration object.</param> /// <param name=\"environment\">The host environment object.</param> /// <returns>The MVC builder object.</returns> public override IMvcBuilder? ConfigureMVC(IMvcBuilder? mVCBuilder, IConfiguration? configuration, IHostEnvironment? environment) { return mVCBuilder; } /// <summary> /// This is called to configure our endpoint routes. For our example, we will just use the default route. /// </summary> /// <param name=\"endpoints\">The endpoint route builder.</param> /// <param name=\"configuration\">The configuration object.</param> /// <param name=\"environment\">The host environment object.</param> /// <returns>The endpoint route builder.</returns> public override IEndpointRouteBuilder? ConfigureRoutes(IEndpointRouteBuilder? endpoints, IConfiguration? configuration, IHostEnvironment? environment) { if (endpoints is null) return endpoints; // Map the default route. endpoints.MapControllerRoute( name: \"default\", pattern: \"{controller=Home}/{action=Index}/{id?}\"); return endpoints; } } /// <summary> /// <para> /// All modules implement the IApplicationModule interface. As such, they all have certain methods that they must implement and can be used to configure the application. /// Module interfaces then get more and more specific to the application type. For example, IAspNetModule adds application, route, and web app configuration methods. /// IMvcModule is used to configure MVC settings, like the BasicModule example. /// </para> /// <para>This example though implements the IRazorPagesModule interface. This is used to configure Razor Pages settings.</para> /// </summary> public class BasicRazorPagesModule : RazorPagesModuleBaseClass<BasicRazorPagesModule> { /// <summary> /// Sometimes modules need to be loaded in a specific order. By default, the order number is 100. /// Lower numbers are loaded first, as such this module will be loaded prior to the BasicModule. /// </summary> public override int Order => 20; /// <summary> /// This method is called to configure Razor Pages settings. /// </summary> /// <param name=\"mVCBuilder\">The MVC builder object.</param> /// <param name=\"configuration\">The configuration object.</param> /// <param name=\"environment\">The host environment object.</param> /// <returns>The configured MVC builder object.</returns> public override IMvcBuilder? ConfigureRazorPages(IMvcBuilder? mVCBuilder, IConfiguration? configuration, IHostEnvironment? environment) { return mVCBuilder; } } /// <summary> /// The other examples use the *BaseClass classes to simplify the process of creating a module. /// However, you can implement the interfaces directly if you prefer or need to due to the module that you are trying to build. /// Note though, that I would recommend breaking down your modules into smaller parts if you find yourself needing to implement multiple interfaces. /// </summary> public class MoreAdvancedModule : IMvcModule, ISignalRModule, IRazorPagesModule { /// <summary> /// The category of the module. This is used to group modules together. /// When using the *BaseClass classes, this is the last part of the namespace that the module is in by default. /// </summary> public string Category { get; } = \"Example Category\"; /// <summary> /// The content path of the module. Gestalt does not directly use this, but it is available for your use. /// For adding static web content, you would still configure the StaticWebAssetBasePath in the csproj file. /// When using the *BaseClass classes, this defaults to \"wwwroot/Content/{Category}/{Name}\". /// </summary> public string ContentPath { get; } = \"MyContentPath\"; /// <summary> /// The ID of the module. This is used to identify the module and determine if there are any conflicts. /// This defaults to the module's type name. /// </summary> public string ID { get; } = \"ExampleID\"; /// <summary> /// The last modified date of the module. This is used to determine if the module has been updated. /// When using the *BaseClass classes, this is the assembly last modified date. /// </summary> public DateTime LastModified { get; } = DateTime.Now; /// <summary> /// The display name of the module. /// By default this would be the name of the module class. /// </summary> public string Name { get; } = \"Example\"; /// <summary> /// The order that the module is loaded in. Lower numbers are loaded first. /// By default, this is 100. /// </summary> public int Order { get; } = 0; /// <summary> /// The tags of the module. This is used to group modules together but is not used by Gestalt directly. /// </summary> public string?[] Tags { get; } = new string?[] { \"Example\" }; /// <summary> /// The version of the module. /// By default, this is the assembly version number. /// </summary> public string Version { get; } = \"1.0.0\"; /// <summary> /// This is called to configure the application. /// </summary> /// <param name=\"applicationBuilder\">The application builder.</param> /// <param name=\"configuration\">The configuration.</param> /// <param name=\"environment\">The host environment.</param> /// <returns>The application builder.</returns> public IApplicationBuilder? ConfigureApplication(IApplicationBuilder? applicationBuilder, IConfiguration? configuration, IHostEnvironment? environment) => applicationBuilder; /// <summary> /// This is called to configure the configuration settings. /// </summary> /// <param name=\"configuration\">The configuration builder.</param> /// <param name=\"environment\">The host environment.</param> /// <param name=\"args\">The arguments.</param> /// <returns>The configuration builder.</returns> public IConfigurationBuilder? ConfigureConfigurationSettings(IConfigurationBuilder? configuration, IHostEnvironment? environment, string?[]? args) => configuration; /// <summary> /// This is called to configure the host settings. /// </summary> /// <param name=\"host\">The host builder.</param> /// <param name=\"configuration\">The configuration.</param> /// <param name=\"environment\">The host environment.</param> /// <returns>The host builder.</returns> public IHostBuilder? ConfigureHostSettings(IHostBuilder? host, IConfiguration? configuration, IHostEnvironment? environment) => host; /// <summary> /// This is called to configure the logging settings. /// </summary> /// <param name=\"logging\">The logging builder.</param> /// <param name=\"configuration\">The configuration.</param> /// <param name=\"environment\">The host environment.</param> /// <returns>The logging builder.</returns> public ILoggingBuilder? ConfigureLoggingSettings(ILoggingBuilder? logging, IConfiguration? configuration, IHostEnvironment? environment) => logging; /// <summary> /// This is called to configure the metrics settings. Note that this is only called if the metrics builder is available. /// In .Net 6, the metrics builder is not available by default and thus is not called. However, in .Net 8, it is available. /// The module can still be used in .Net 6 or 8, but the metrics builder will not be available in .Net 6. /// </summary> /// <param name=\"metrics\">The metrics builder.</param> /// <param name=\"configuration\">The configuration.</param> /// <param name=\"environment\">The host environment.</param> /// <returns>The metrics builder.</returns> public IMetricsBuilder? ConfigureMetrics(IMetricsBuilder? metrics, IConfiguration? configuration, IHostEnvironment? environment) => metrics; /// <summary> /// This is called to configure the MVC settings. /// </summary> /// <param name=\"mVCBuilder\">The MVC builder.</param> /// <param name=\"configuration\">The configuration.</param> /// <param name=\"environment\">The host environment.</param> /// <returns>The MVC builder.</returns> public IMvcBuilder? ConfigureMVC(IMvcBuilder? mVCBuilder, IConfiguration? configuration, IHostEnvironment? environment) => mVCBuilder; /// <summary> /// This is called to configure the Razor Pages settings. /// </summary> /// <param name=\"mVCBuilder\">The MVC builder.</param> /// <param name=\"configuration\">The configuration.</param> /// <param name=\"environment\">The host environment.</param> /// <returns>The MVC builder.</returns> public IMvcBuilder? ConfigureRazorPages(IMvcBuilder? mVCBuilder, IConfiguration? configuration, IHostEnvironment? environment) => mVCBuilder; /// <summary> /// This is called to configure endpoint routes. /// </summary> /// <param name=\"endpoints\">The endpoint route builder.</param> /// <param name=\"configuration\">The configuration.</param> /// <param name=\"environment\">The host environment.</param> /// <returns>The endpoint route builder.</returns> public IEndpointRouteBuilder? ConfigureRoutes(IEndpointRouteBuilder endpoints, IConfiguration? configuration, IHostEnvironment? environment) => endpoints; /// <summary> /// This is called to configure the services. /// </summary> /// <param name=\"services\">The service collection.</param> /// <param name=\"configuration\">The configuration.</param> /// <param name=\"environment\">The host environment.</param> /// <returns>The service collection.</returns> public IServiceCollection? ConfigureServices(IServiceCollection? services, IConfiguration? configuration, IHostEnvironment? environment) => services; /// <summary> /// This is called to configure SignalR settings. /// </summary> /// <param name=\"builder\">The SignalR server builder.</param> /// <param name=\"configuration\">The configuration.</param> /// <param name=\"environment\">The host environment.</param> /// <returns>The SignalR server builder.</returns> public ISignalRServerBuilder? ConfigureSignalR(ISignalRServerBuilder? builder, IConfiguration? configuration, IHostEnvironment? environment) => builder; /// <summary> /// This is called to configure the web host settings. /// </summary> /// <param name=\"webHost\">The web host builder.</param> /// <param name=\"configuration\">The configuration.</param> /// <param name=\"environment\">The host environment.</param> /// <returns>The web host builder.</returns> public IWebHostBuilder? ConfigureWebHostSettings(IWebHostBuilder? webHost, IConfiguration? configuration, IHostEnvironment? environment) => webHost; /// <summary> /// This is called when the application is started. Any code that needs to be run when the application starts can be placed here. /// </summary> public void OnStarted() { } /// <summary> /// This is called when the application is stopped. Any code that needs to be run when the application stops can be placed here. /// </summary> public void OnStopped() { } /// <summary> /// This is called when the application is stopping. Any code that needs to be run when the application is stopping can be placed here. /// </summary> public void OnStopping() { } /// <summary> /// This is called to configure the options for razor pages. /// Note that you can always skip this method and instead configure the options in the ConfigureServices method. /// It's more of a convenience method than necessary. /// </summary> /// <param name=\"options\">The razor pages options object.</param> /// <param name=\"configuration\">The configuration</param> /// <param name=\"environment\">The host environment.</param> /// <returns>The razor pages options object.</returns> public RazorPagesOptions? Options(RazorPagesOptions? options, IConfiguration? configuration, IHostEnvironment? environment) => options; /// <summary> /// This is called to configure the options for SignalR /// Note that you can always skip this method and instead configure the options in the ConfigureServices method. /// It's more of a convenience method than necessary. /// </summary> /// <param name=\"options\">The SignalR hub options object.</param> /// <param name=\"configuration\">The configuration</param> /// <param name=\"environment\">The host environment.</param> /// <returns>The SignalR hub options object.</returns> public HubOptions? Options(HubOptions? options, IConfiguration? configuration, IHostEnvironment? environment) => options; /// <summary> /// This is called to configure the options for MVC. /// Note that you can always skip this method and instead configure the options in the ConfigureServices method. /// It's more of a convenience method than necessary. /// </summary> /// <param name=\"options\">The MVC options object.</param> /// <param name=\"configuration\">The configuration</param> /// <param name=\"environment\">The host environment.</param> /// <returns>The MVC options object.</returns> public MvcOptions? Options(MvcOptions? options, IConfiguration? configuration, IHostEnvironment? environment) => options; } }"
  },
  "articles/selfcontained.html": {
    "href": "articles/selfcontained.html",
    "title": "Code | Gestalt API Reference",
    "keywords": "Code using Gestalt.ASPNet.MVC.BaseClasses; using Microsoft.AspNetCore.Builder; using Microsoft.AspNetCore.Routing; using Microsoft.Extensions.Configuration; using Microsoft.Extensions.DependencyInjection; using Microsoft.Extensions.Hosting; namespace Gestalt.Example.SelfContainedModule { /// <summary> /// This module is self-contained and can be used in any project. /// As long as the project is using Gestalt, this module can be created and reused as needed. /// In order to test it out, it is already added to the Gestalt.Example project. Just run the project and navigate to /healthcheck or /health. /// </summary> public class ExampleModule : MvcModuleBaseClass<ExampleModule> { /// <summary> /// Let's set the order to the lowest possible value so it's loaded first. /// </summary> public override int Order => int.MinValue; /// <summary> /// Let's set up health checks for the application. /// </summary> /// <param name=\"endpoints\">The endpoint route builder</param> /// <param name=\"configuration\">The configuration</param> /// <param name=\"environment\">The host environment</param> /// <returns>The endpoint route builder</returns> public override IEndpointRouteBuilder? ConfigureRoutes(IEndpointRouteBuilder? endpoints, IConfiguration? configuration, IHostEnvironment? environment) { endpoints?.MapHealthChecks(\"/healthcheck\"); return endpoints; } /// <summary> /// Here we add the health checks to the services and add a custom health check class. /// </summary> /// <param name=\"services\">The service collection</param> /// <param name=\"configuration\">The configuration</param> /// <param name=\"environment\">The host environment</param> /// <returns>The service collection</returns> public override IServiceCollection? ConfigureServices(IServiceCollection? services, IConfiguration? configuration, IHostEnvironment? environment) { services?.AddHealthChecks() .AddCheck<SystemStatusHealthCheck>(\"System\", null, [\"System\"], new TimeSpan(0, 0, 3)); return services; } } }"
  },
  "index.html": {
    "href": "index.html",
    "title": "Gestalt | Gestalt API Reference",
    "keywords": "Gestalt Gestalt is a C# library designed to facilitate the development of modular applications. It allows developers to create reusable modules that can be easily integrated into various applications, enhancing code reusability and maintainability. Table of Contents Introduction Features Getting Started Installation Creating Modules Using Modules Contributing License Introduction Modern software development often requires building applications with modular architectures to promote reusability and scalability. Gestalt provides a framework for organizing application functionality into cohesive modules, encapsulating logic and services that can be easily shared across different projects. Features Modular Architecture: Define modules encapsulating configuration, services, and lifecycle events. Configuration Management: Easily configure application settings using built-in configuration providers. Dependency Injection: Utilize dependency injection for managing dependencies and services. Lifecycle Management: Implement lifecycle events such as application start, stop, and shutdown. Getting Started Installation Gestalt can be installed via NuGet Package Manager: dotnet add package Gestalt.Core Or for framework specific functionality, install the appropriate package: # For ASP.NET base functionality dotnet add package Gestalt.AspNet # For ASP.NET MVC functionality dotnet add package Gestalt.AspNet.MVC # For ASP.NET Controllers functionality (without views) dotnet add package Gestalt.AspNet.Controllers # For ASP.NET SignalR functionality dotnet add package Gestalt.AspNet.SignalR # For ASP.NET Razor Pages functionality dotnet add package Gestalt.AspNet.RazorPages # For console applications dotnet add package Gestalt.Console Creating Modules To create a module, follow these steps: Define a class that inherits from one of the *ModuleBaseClasses or implements one of the IApplicationModule interfaces (IMvcModule, ISignalRModule, IRazorPagesModule, etc). Override methods for configuring settings, services, and lifecycle events. Implement module-specific functionality within the class. A basic example of a module class is shown below: /// <summary> /// This is an example of a basic module that configures the application with the usual default settings when creating a new web application. /// It implements the MvcModuleBaseClass which simplifies the process of creating a module that needs to modify MVC settings. /// However, you can implement the IMvcModule interface directly if you prefer. /// </summary> public class BasicModule : MvcModuleBaseClass<BasicModule> { /// <summary> /// This is called to configure the IApplicationBuilder object. Since this is an MVC app, that would be the WebApplication object. /// </summary> /// <param name=\"applicationBuilder\">The application builder object.</param> /// <param name=\"configuration\">The configuration object.</param> /// <param name=\"environment\">The host environment object.</param> /// <returns>The application builder object should be returned.</returns> public override IApplicationBuilder? ConfigureApplication(IApplicationBuilder? applicationBuilder, IConfiguration? configuration, IHostEnvironment? environment) { if (applicationBuilder is null) return applicationBuilder; // Configure the HTTP request pipeline. if (environment?.IsDevelopment() == false) { // This is the default exception handler for the application when in production. _ = applicationBuilder.UseExceptionHandler(\"/Home/Error\"); // We will add a strict transport security header to the response. _ = applicationBuilder.UseHsts(); } // This will redirect HTTP requests to HTTPS. _ = applicationBuilder.UseHttpsRedirection(); // And let's serve static files. _ = applicationBuilder.UseStaticFiles(); // We will also add authorization to the application. _ = applicationBuilder.UseAuthorization(); // And lastly, we will return the application builder. return applicationBuilder; } /// <summary> /// This is called to configure the MVC options. We will just return the options object as is. /// </summary> /// <param name=\"mVCBuilder\">The MVC builder object.</param> /// <param name=\"configuration\">The configuration object.</param> /// <param name=\"environment\">The host environment object.</param> /// <returns>The MVC builder object.</returns> public override IMvcBuilder? ConfigureMVC(IMvcBuilder? mVCBuilder, IConfiguration? configuration, IHostEnvironment? environment) { return mVCBuilder; } /// <summary> /// This is called to configure our endpoint routes. For our example, we will just use the default route. /// </summary> /// <param name=\"endpoints\">The endpoint route builder.</param> /// <param name=\"configuration\">The configuration object.</param> /// <param name=\"environment\">The host environment object.</param> /// <returns>The endpoint route builder.</returns> public override IEndpointRouteBuilder? ConfigureRoutes(IEndpointRouteBuilder? endpoints, IConfiguration? configuration, IHostEnvironment? environment) { if (endpoints is null) return endpoints; // Map the default route. endpoints.MapControllerRoute( name: \"default\", pattern: \"{controller=Home}/{action=Index}/{id?}\"); return endpoints; } } Using Modules To have your application start using modules, you just need to call UseGestalt on the application builder: // Program.cs public class Program { public static void Main(string[] args) { var builder = WebApplication.CreateBuilder(args); var app = builder.UseGestalt<ExampleModule>(); app.Run(); } } For more advanced usage, refer to the documentation. Contributing Contributions to Gestalt are welcome! If you encounter any issues or have suggestions for improvements, please feel free to open an issue or submit a pull request. Before contributing, please review the contribution guidelines. License Gestalt is licensed under the Apache 2.0 License."
  }
}